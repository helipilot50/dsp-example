extend schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.3"
    import: ["@key", "@external", "@shareable"]
  )

scalar DateTime
scalar Money
scalar EmailAddress

# Write Model

extend type Mutation {
  mapAccountRetailers(accountId: ID!, retailerIds: [ID]!): [Retailer]
  addAccountSeller(accountId: ID!, sellerId: ID!): Seller
  addDemandAccountBrands(accountId: ID!, brandIds: [ID!]!): [Brand]
  addRemoveBrandsToPortfolio(portfolioId: ID!, brandIds: [ID!]!): Portfolio
  addUser(accountId: ID!, userId: ID!): User
  connectAccountToRetailer(accountId: ID!, retailerId: ID!): Account
  newAccount(account: NewAccount!): Account
  newPortfolio(portfolio: NewPortfolio!): Portfolio
  newPrivateMarketAccount(
    accountId: ID!
    privateMarketAccount: NewPrivateMarketAccount!
  ): PrivateMarketAccount
  enableBrandedKeywords(accountId: ID!): Account
  grantBrandAccessForUser(
    portfolioId: ID!
    userId: ID!
    brandId: ID!
  ): Portfolio
  modifyAccoutSettings(
    accountId: ID!
    settings: UpdateAccountSettings!
  ): AccountSettings
  modifyCountrySettings(accountId: ID!, countryId: ID): CountrySettings
  modifyCurrencySettings(
    accountId: ID!
    currency: CurrencyCode!
  ): CurrencySettings
  modifyPortfolioName(portfolioId: ID!, name: String!): Portfolio
  modifyReportingLabel(accountId: ID!, label: String!): ReportingLabel
  removeAccountRetailer(accountId: ID!, retailerId: ID!): Retailer
  removeAccountSeller(accountId: ID!, sellerId: ID!): Seller
  removeAccountUser(accountId: ID!, userId: ID!): User
  removeBrandAccessForUser(userId: ID!, brandId: ID!): User
  removeDemandAccountBrands(accountId: ID!, brandIds: [ID!]!): [Brand]
  removePortfolio(portfolioId: ID!): Portfolio
  removePortfolioFromAccount(portfolioId: ID!, accountId: ID!): Portfolio
  setupWhiteLabelSettings(
    accountId: ID!
    whiteLabelSettings: NewWhiteLabelSettings!
  ): AccountWhiteLabelSettings
  updateAccountFees(accountId: ID!, fees: NewAccountFee!): AccountFee
  updateUser: User
  updateUserName(accountId: ID!, userId: ID!, name: String!): User
  updateWhiteLabelSettings(
    accountId: ID!
    whiteLabelSettings: UpdateWhiteLabelSettings!
  ): AccountWhiteLabelSettings
}

input NewSalesForeAccount {
  name: String!
  shoeSize: Float
  favoriteColor: String
}

input NewAccountFee {
  demandSideFee: Money!
  supplySideFee: Money!
  startDate: DateTime!
  endDate: DateTime!
  accountServicingFee: Money
  isSponsoredProductsManagedServiceFee: Boolean
  isCommerceDisplayManagedServiceFee: Boolean
}

input NewAccount {
  name: String!
  accountExternalId: ID
  salesForceAccount: NewSalesForeAccount
  parentAccount: ID
  parentAccountLabel: String
  type: AccountType!
  currency: CurrencyCode!
  allowBrandedKeywords: Boolean!
  fee: NewAccountFee
  countries: [ID]!
}

input NewPortfolio {
  name: String!
  brands: [ID]!
  account: ID!
}

input NewPrivateMarketAccount {
  name: String!
  account: ID!
}

input UpdateWhiteLabelSettings {
  things: String
}

input UpdateAccountSettings {
  things: String
}

input NewWhiteLabelSettings {
  things: String
}

# Event Model

extend type Subscription {
  accountBrandedKeywordsDisabled(accountId: ID!): Account
  accountBrandedKeywordsEnabled(accountId: ID!): Account
  accountBrandsUpated(accountId: ID!): Account
  accountCountryAdded(accountId: ID!): Account
  accountCreated: Account
  accountCurrencyDataChanged(accountId: ID!): Account
  accountFeesModified(accountId: ID!): AccountFee
  accountInitialized(accountId: ID!): Account
  accountReportingLabelModified(accountId: ID!): Account
  accountRetailerConnected(accountId: ID!): Retailer
  accountRetailersUpdated(accountId: ID!): [Retailer]
  accountSalesforceDataModified(accountId: ID!): SalesForceAccount
  accountSellerModified(accountId: ID!): Account
  accountWhileLabelSettingsCreated(accountId: ID!): AccountSettings
  accountWhileLabelSettingsUpdated(accountId: ID!): AccountSettings
  childAccountCreated: Account
  externalUserNameUpdated: Account
  portfolioBrandsModified: Portfolio
  portfolioCreated: Portfolio
  portfolioMappedToUser: Portfolio
  portfolioNameModified: Portfolio
  portfoliosRemoved: Portfolio
  portfolioUserAdded: User
  portfolioUserRemovedFrom: User
  privateMarketAccountCrated: PrivateMarketAccount
  accountUserRemoved: User
  accountUserUpdated: User
  accountUserAdded: User
  externameUserNameUpdated: User
}

# Read Model

extend type Query {
  """
  retrives a single account by ID
  findAccount
  """
  account(accountId: ID!): Account
  """
  retrives a list of accounts for me, optionally filtered by name
  if no accounts are fount an empty list will be returned
  """
  accounts(searchName: String, retailerId: ID): [Account]!
}

# Externals

extend type Retailer @key(fields: "id") {
  id: ID! @external
  """
  sellers related to the retailer
  """
  sellers: [Seller]
  """
  account related to the retailer
  """
  account: Account
}

# Brand stub
type Brand @key(fields: "id", resolvable: false) {
  id: ID!
}

# User stub
type User @key(fields: "id", resolvable: false) {
  id: ID!
}

"""
Sellers are a concept on many retailer platforms where products are purchased through
 (and even sometimes fulfilled by) a separate business contracting with the retailer.
 Many sellers do this to try and gain representation on a platform with an existing shopper base,
 and retailers do this to gain a cut of the market the seller brings (while often defraying cost and risk associated with inventory).
"""
type Seller @key(fields: "id") {
  # An identifier for the seller within the retailers site. This is usually not intended for human display and may take many forms (UUIDs, numeric values, etc).
  id: ID!
  """
  The name of the seller; usually this represents a business and is intended to be displayable for people to easily digest. “Ben’s House of Vintage Shoes” is a good example.
  """
  name: String!
}

"""
Account in SalesForce
"""
type SalesForceAccount @key(fields: "id") {
  id: ID!
  name: String
  shoeSize: Float
  favoriteColor: String
}

"""
an account is a linkage between users and advertising based business needs.
To this effect different forms of accounts (and “portfolios” within those accounts)
will give users the ability to perform different actions against different entities
(ex: new a line item with products attached to a brand).
Accounts (prior to 2023) revolve around giving users access to UC Brands
(in the case of a “Demand Brand Account”) or to Retailer(s) (in the case of  Supply accounts).
"""
type Account @key(fields: "id") {
  """
  Unique Id for the Account generated by the system
  """
  id: ID!
  """
  The name of the account, entered by the user on account creation
  """
  name: String!
  """
  The external Id of the account
  """
  accountExternalId: ID
  """
  the salesforce account id
  """
  salesForceAccount: SalesForceAccount
  """
  Relationship to a parent account
  """
  parentAccount: Account
  """
  A label matching the parent account
  """
  parentAccountLabel: String
  """
  Type of the account: supply or demand
  """
  type: AccountType

  """
  are brand keywords allowed for the account
  """
  allowBrandedKeywords: Boolean
  """
  Fees for the account
  """
  fee: AccountFee

  """
  List of Sellers related to the Account
  """
  sellers: [Seller]
  """
  list of retailers for the account
  """
  retailers(offset: Int = 0, limit: Int = 100): [Retailer]
  """
  Account currency
  """
  currency: Currency
}

type PrivateMarketAccount @key(fields: "id") {
  id: ID!
  name: String
  shoeSize: Float
  favoriteColor: String
}

"""
Fee structure for an Account
"""
type AccountFee @key(fields: "id") {
  """
  Unique Id for the Account Fee generated by the system
  """
  id: ID!
  """
  Account to which the fee belongs
  """
  account: Account
  """
  The fee charged to the demand side of the account
  """
  demandSideFee: Money
  """
  The fee charged to the supply side of the account
  """
  supplySideFee: Money
  """
  The date when the fee is active. This is null when a fee is not yet active.
  """
  startDate: DateTime
  """
  The scheduled end-date of active fees or staged fees; when this is 0, the fee is not scheduled to end.
  """
  endDate: DateTime
  """
  The date when the fee is no longer active. This is null when a fee is still active.
  """
  expiryDate: DateTime
  """
  The fee charged to the account for account servicing
  """
  accountServicingFee: Money
  """
  When true, the fee is applied to Sonsored Products campaigns.
  """
  isSponsoredProductsManagedServiceFee: Boolean
  """
  When true, the fee is applied to Commerce Display campaigns.
  """
  isCommerceDisplayManagedServiceFee: Boolean
}

"""
TODO: add description
"""
type CountrySettings {
  thing: String
  secondThing: String
}

"""
TODO: add description
"""
type Portfolio @key(fields: "id") {
  id: ID!
  name: String @shareable
  accounts: [Account]
}
"""
TODO: add description
"""
type AccountWhiteLabelSettings {
  thing: String
  secondThing: String
}
"""
TODO: add description
"""
type AccountSettings {
  something: String
}
"""
TODO: add description
"""
type CurrencySettings {
  something: String
}
"""
TODO: add description
"""
type ReportingLabel {
  something: String
}

enum AccountType {
  SUPPLY
  DEMAND
}
