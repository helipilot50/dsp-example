extend schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.3"
    import: ["@key", "@external", "@shareable", "@requires"]
  )

scalar DateTime
scalar Money
scalar EmailAddress

"""
Retail Campaign
"""
type Campaign @key(fields: "id") {
  # Unique Id for the Campaign generated by the system
  id: ID!
  """
  Name of the campaign
  """
  name: String @shareable
  """
  External Id of the campaign, if any
  """
  externalCampaignId: ID
  """
  External Id of the account to which the campaign belongs
  """
  externalAccountId: ID
  """
  Account to which the campaign belongs
  """
  account: Account
  """
  Type of the campaign: Sponsored Products or Commerce Display
  """
  type: CampaignType @shareable
  """
  Status of the campaign: Active, Paused, Archived
  """
  status: CampaignStatus
  isLockout: Boolean @shareable
  """
  Start date of the campaign
  """
  startDate: DateTime @shareable
  """
  End date of the campaign
  """
  endDate: DateTime @shareable
  """
  Budget for the campaign
  """
  budget: CampaignBudget @shareable
  """
  retailer IDs for the campaign
  """
  retailerIds: [ID!]
  """
  relailers in the campaign
  """
  retailers: [Retailer!]
  """
  list of lineitems in the campaign
  """
  lineitems: LineitemList
  """
  list of brands in the campaign
  """
  brands: [Brand!]

  advertiser: Advertiser

  eligibility: CampaignEligibility
}

"""
Frequency Capping structure for Retail Campaign
"""
type CampaignCapping {
  id: ID!
  count: Int
  duration: String
  campaign: Campaign
}
"""
Budget structure of Retail Campaign
"""
type CampaignBudget {
  isCapped: Boolean @shareable
  amount: Money @shareable
  cappedBudgetAmount: Money @shareable
  monthlyPacing: Money @shareable
  dailyPacing: Money @shareable
  type: BudgetType @shareable
}

type Lineitem @key(fields: "id") {
  id: ID!
  name: String!
  campaign: Campaign
  startDate: DateTime
  endDate: DateTime
  creatives: [Creative]
  status: LineitemStatus
  retailer: Retailer
  financialStatus: FinancialStatus
  budget: LineitemBudget
  pages: [LineitemPage]
}

type LineitemBudget {
  isCapped: Boolean
  amount: Money
  type: BudgetType
}
type LineitemPage {
  type: PageType
  taxonomy: String
  includeSubchildren: Boolean
  isExclusion: Boolean
  environment: PageEnvironment
}

type LineitemList implements ListOffsetLimit {
  lineitems: [Lineitem]
  totalCount: Int
  offset: Int
  limit: Int
}

type CampaignList implements ListPage {
  campaigns: [Campaign]
  totalCount: Int
  page: Int
  size: Int
}

enum CampaignType {
  Unknown
  SponsoredProducts
  CommerceDisplay
}

enum CampaignStatus {
  Unknown
  Active
  Inactive
  Scheduled
  Ended
}

enum BudgetType {
  Total
  Daily
  Monthly
  Hourly
}

enum CampaignEligibility {
  Unknown
  Auction
  Preferred
  Offsite
  OffsiteCpc
}

enum FinancialStatus {
  Unknown
  Active
  BudgetHitDaily
  BudgetHitMonthly
  BudgetHitTotal
  NoFunds
}

enum PageType {
  Category
  Brand
  Product
  Search
  Other
}
enum PageEnvironment {
  App
  Mobile
  Web
}
enum LineitemStatus {
  Active
  Paused
  Archived
}

type Creative @key(fields: "id") {
  id: ID!
  campaign: Campaign
}

# Externals
extend type Brand @key(fields: "id") {
  id: ID! @external
  campaigns: CampaignList
  lineItems: [Lineitem]
}
extend type Retailer @key(fields: "id") {
  id: ID! @external
  campaigns: CampaignList
  """
  Lineitems for the retailer
  """
  lineitems: [Lineitem]
}
extend type Account @key(fields: "id") {
  id: ID! @external
  campaigns: CampaignList
}
extend type Advertiser @key(fields: "id") {
  id: ID! @external
  campaigns: CampaignList @shareable
}

extend type Query {
  """
  retrives a single campaign by ID
  """
  campaign(id: ID!): Campaign
  """
  retrives a list of campaigns for an account or retailer
  """
  campaigns(
    """
    for account ID
    """
    accountId: ID
    """
    for retailer ID
    """
    retailerId: ID
    brandId: ID
    """
    page number
    """
    page: Int = 1
    """
    page size
    """
    size: Int = 4
  ): CampaignList
  """
  retrives a single lineitem by ID
  """
  lineitem(id: ID!): Lineitem
  """
  retrives a list of lineitems for a campaign
  """
  lineitems(
    """
    for campaign ID
    """
    campaignId: ID!
    """
    offset for pagination
    """
    offset: Int = 0
    """
    limit for pagination
    """
    limit: Int = 100
  ): LineitemList
}

# Write model

"""
Input type for creating a new campaign (RM).
"""
input NewCampaign {
  """
  name of the campaign
  """
  name: String!
  """
  type of the campaign (Unknown, SponsoredProducts, CommerceDisplay)
  """
  type: CampaignType = CommerceDisplay
  """
  start date of the campaign
  """
  startDate: DateTime!
  """
  end date of the campaign
  """
  endDate: DateTime!
  """
  budget for the campaign, including amount and budget type ( Total, Daily, Monthly, Hourly )
  """
  budget: NewCampaignBudget!
  clickLookbackWindow: LookbackWindow
  viewLookbackWindow: LookbackWindow
  clickMatchLevel: MatchLevel
  viewMatchLevel: MatchLevel
  isLockout: Boolean
  unexposedRate: Money
}

input NewCampaignBudget {
  isCapped: Boolean!
  amount: Money
  cappedBudgetAmount: Money
  monthlyPacing: Money
  dailyPacing: Money
  type: BudgetType!
}

input NewLineitem {
  name: String!
  startDate: DateTime!
  endDate: DateTime!
  budget: NewLineitemBudget!
  pages: [NewLineitemPage!]!
}

input NewLineitemBudget {
  isCapped: Boolean!
  amount: Money!
  type: BudgetType!
}

input NewLineitemPage {
  type: PageType!
  Taxonomy: String!
  includeSubchildren: Boolean!
  isExclusion: Boolean!
  environment: PageEnvironment!
}

extend type Mutation {
  """
  creates a new campaign and returns the campaign
  """
  newCampaign(advertiserId: ID!, campaign: NewCampaign!): Campaign
  """
  creates a new lineitem and returns the lineitem
  """
  newLineitem(campaignId: ID!, lineitem: NewLineitem!): Lineitem
  """
  activates the Lineitems by ID and returns the lineitems
  """
  activateLineitems(lineitemIds: [ID]!): [Lineitem]!
  """
  pauses the Lineitems by ID and returns the lineitems
  """
  pauseLineitems(lineitemIds: [ID]!): [Lineitem]!
  """
  archives the Lineitems by ID and returns the lineitems
  """
  archiveLineitems(lineitemIds: [ID]!): [Lineitem]!
}

"""
Look back window is the attribution window and refers to the acceptable number of days between the click and the conversion.

See: https://criteo.atlassian.net/wiki/spaces/RMP/pages/1503109321/8.1.7.4.+Attribution+-+Look-back+Windows+and+How+to+Customize+Them
"""
enum LookbackWindow {
  """
  7 Days
  """
  OneWeek
  """
  14 Days
  """
  TwoWeeks
  """
  30 Days
  """
  OneMonth
}

"""
SKU matching level is used in Attribution and is the level of granularity at which the SKU is matched.
"""
enum MatchLevel {
  """
  Matches on the exact SKU
  """
  Sku
  """
  Matches on SKU Category
  """
  SkuCategory
  """
  Matches on SKU Category and SKU Brand
  """
  SkuCategoryBrand
}

# events

extend type Subscription {
  campaignCreated: Campaign!
  lineitemCreated: Lineitem!
  lineitemActivated(lineitemId: ID!): Lineitem!
  lineitemPaused(lineitemId: ID!): Lineitem!
}
