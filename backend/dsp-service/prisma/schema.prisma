// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

model Account {
  id                   String      @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  accountExternalId    String?
  salesForceAccountId  String?
  parentAccount        String?
  parentAccountLabel   String?
  type                 AccountType @default(DEMAND)
  allowBrandedKeywords Boolean
  currencyCode         String?
  currency             Currency?   @relation(fields: [currencyCode], references: [code])
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  countryIds           String[]
  retailerIds          String[]    @db.ObjectId
  retailers            Retailer[]  @relation(fields: [retailerIds], references: [id])
  fee                  AccountFees
  brandIds             String[]    @db.ObjectId
  bands                Brand[]     @relation(fields: [brandIds], references: [id])

  @@index([accountExternalId])
  @@index([salesForceAccountId])
  @@fulltext([name])
}

type AccountFees {
  demandSideFee               Float?
  supplySideFee               Float?
  managementFee               Float?
  startDate                   DateTime?
  accountServicing            Float?
  sponsoredProductsManagedFee Boolean?
  commerceDisplayManagedFee   Boolean?
}

enum AccountType {
  DEMAND
  SUPPLY
}

model Campaign {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  externalCampaignId String?
  externalAccountId  String?
  accountId          String
  type               CampaignType     @default(SponsoredProducts)
  status             CampaignStatus   @default(Unknown)
  isLockout          Boolean?
  startDate          DateTime?
  updatedAt          DateTime         @updatedAt
  endDate            DateTime?
  budgetId           String?          @db.ObjectId
  advertiserId       String?          @db.ObjectId
  retailerId         String?          @db.ObjectId
  brandIds           String[]         @db.ObjectId
  brands             Brand[]          @relation(fields: [brandIds], references: [id])
  createdAt          DateTime         @default(now())
  cappingTarget      CampaignCapping?
  budget             CampaignBudget?

  @@index([accountId])
  @@index([externalCampaignId])
  @@index([externalAccountId])
  @@index([advertiserId])
  @@fulltext([name])
}

type CampaignBudget {
  isCapped Boolean
  amount   Float
  memo     String
  type     BudgetType
}

type CampaignCapping {
  count    Int
  duration Int
}

enum CampaignStatus {
  Active
  Ended
  Inactive
  Scheduled
  Unknown
}

enum CampaignType {
  CommerceDisplay
  SponsoredProducts
  Unknown
}

enum CampaignEligibility {
  Auction
  Offsite
  OffsiteCpc
  Preferred
  Unknown
}

enum LookbackWindow {
  OneMonth
  OneWeek
  TwoWeeks
}

enum MatchLevel {
  Sku
  SkuCategory
  SkuCategoryBrand
}

enum PageEnvironment {
  App
  Mobile
  Web
}

enum PageType {
  Brand
  Category
  Other
  Product
  Search
}

enum TemplateFormatType {
  BUTTERFLY
  SHOWCASE
  SPONSOREDPRODUCTS
}

model Retailer {
  id                     String         @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  rank                   Int
  countryOfOrigin        String
  retailRevenue          Int
  parentRevenue          Int
  parentCompanyNetIncome Int
  operationalFormat      String
  countriesOfOperation   Int
  retailRevenueCagr      Int
  status                 RetailerStatus @default(ACTIVE)
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  accountIds             String[]       @db.ObjectId
  accounts               Account[]      @relation(fields: [accountIds], references: [id])
  brandIds               String[]       @db.ObjectId
  brands                 Brand[]        @relation(fields: [brandIds], references: [id])

  @@fulltext([name])
}

enum RetailerStatus {
  ACTIVE
  INACTIVE
  LIVE
}

model Brand {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  foundedBy   String?
  foundedIn   String?
  country     String?
  keyPeople   String?
  industry    String?
  website     String?
  rank        Int?
  brandValue  Int? // in millions USD
  rating      String
  retailerIds String[]   @db.ObjectId
  retailers   Retailer[] @relation(fields: [retailerIds], references: [id])
  accountIds  String[]   @db.ObjectId
  accounts    Account[]  @relation(fields: [accountIds], references: [id])
  campaignIds String[]   @db.ObjectId
  campaigns   Campaign[] @relation(fields: [campaignIds], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@fulltext([name])
}

model GlobalTaxonomy {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  parent       String?
  taxonomyText String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@fulltext([name])
}

model Lineitem {
  audienceId      String?
  budgetId        String?         @db.ObjectId
  budget          LineitemBudget? @relation(fields: [budgetId], references: [id])
  campaignId      String
  endDate         DateTime?
  financialStatus FinancialStatus @default(Unknown)
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  retailerId      String?
  startDate       DateTime?
  status          LineitemStatus  @default(Paused)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([campaignId])
  @@fulltext([name])
}

enum LineitemStatus {
  Active
  Archived
  Paused
}

model LineitemBudget {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  amount     Int
  isCapped   Boolean?
  type       BudgetType
  lineitemId String     @db.ObjectId
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  lineitems  Lineitem[]

  @@index([lineitemId])
}

enum BudgetType {
  Daily
  Hourly
  Monthly
  Total
}

enum FinancialStatus {
  Active
  BudgetHitDaily
  BudgetHitMonthly
  BudgetHitTotal
  NoFunds
  Unknown
}

// Currency
model Currency {
  // ISO 4217 currency code
  code      String    @id @map("_id")
  // Currency name
  name      String
  // Currency Symbol
  symbol    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Account   Account[]
}

// Country
model Country {
  // ISO 3166 country code 
  code               String   @id @map("_id")
  // currency used in country 
  currency           String
  name               String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  isActiveForAccount Boolean?

  @@fulltext([name])
}

model SKU {
  skuKey                String   @id @map("_id")
  name                  String
  imageUrl              String?
  image                 String?
  description           String?
  manufacturer          String?
  matchingSearchPhrases String?
  quantity              Int
  price                 Int
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@fulltext([name, description, matchingSearchPhrases])
}

model PortfolioId {
  id         String   @id @map("_id")
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userIds    String[] @db.ObjectId
  accountIds String[] @db.ObjectId
}
