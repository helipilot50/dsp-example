import { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
import { Campaign as CampaignModel, Account as AccountModel, Country as CountryModel, Lineitem as LineitemModel, SKU as SKUModel, Retailer as RetailerModel, Brand as BrandModel, Currency as CurrencyModel } from '@prisma/client/index.d';
import { DspContext } from './context';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  DateTime: Date;
  Money: number;
  URL: string;
};

/**
 * an account is a linkage between users and advertising based business needs.
 * To this effect different forms of accounts (and “portfolios” within those accounts)
 * will give users the ability to perform different actions against different entities
 * (ex: new a line item with products attached to a brand).
 * Accounts (prior to 2023) revolve around giving users access to UC Brands
 * (in the case of a “Demand Brand Account”) or to Retailer(s) (in the case of  Supply accounts).
 */
export type Account = {
  __typename?: 'Account';
  /** The external Id of the account */
  accountExternalId?: Maybe<Scalars['ID']>;
  /** are brand keywords allowed for the account */
  allowBrandedKeywords?: Maybe<Scalars['Boolean']>;
  /** A list of Brands related to the Account */
  brands?: Maybe<BrandList>;
  campaigns?: Maybe<CampaignList>;
  /** A list of countries that Account operates in */
  countries?: Maybe<Array<Maybe<Country>>>;
  /** Currency code for the Account */
  currency?: Maybe<Currency>;
  /** Fees for the account */
  fee?: Maybe<AccountFee>;
  /** Unique Id for the Account generated by the system */
  id: Scalars['ID'];
  /** The name of the account, entered by the user on account creation */
  name: Scalars['String'];
  /** Relationship to a parent account */
  parentAccount?: Maybe<Account>;
  /** A label matching the parent account */
  parentAccountLabel?: Maybe<Scalars['String']>;
  /** list of retailers for the account */
  retailers?: Maybe<Array<Maybe<Retailer>>>;
  /** the salesforce account id */
  salesForceAccount?: Maybe<SalesForceAccount>;
  /** List of Sellers related to the Account */
  sellers?: Maybe<Array<Maybe<Seller>>>;
  /** Type of the account: supply or demand */
  type?: Maybe<AccountType>;
  /** List of Users permitted to act on the Account */
  users?: Maybe<Array<Maybe<User>>>;
};


/**
 * an account is a linkage between users and advertising based business needs.
 * To this effect different forms of accounts (and “portfolios” within those accounts)
 * will give users the ability to perform different actions against different entities
 * (ex: new a line item with products attached to a brand).
 * Accounts (prior to 2023) revolve around giving users access to UC Brands
 * (in the case of a “Demand Brand Account”) or to Retailer(s) (in the case of  Supply accounts).
 */
export type AccountRetailersArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

/** Fee structure for an Account */
export type AccountFee = {
  __typename?: 'AccountFee';
  /** Account to which the fee belongs */
  account?: Maybe<Account>;
  /** The fee charged to the account for account servicing */
  accountServicingFee?: Maybe<Scalars['Money']>;
  /** The fee charged to the demand side of the account */
  demandSideFee?: Maybe<Scalars['Money']>;
  /** The scheduled end-date of active fees or staged fees; when this is 0, the fee is not scheduled to end. */
  endDate?: Maybe<Scalars['DateTime']>;
  /** The date when the fee is no longer active. This is null when a fee is still active. */
  expiryDate?: Maybe<Scalars['DateTime']>;
  /** When true, the fee is applied to Commerce Display campaigns. */
  isCommerceDisplayManagedServiceFee?: Maybe<Scalars['Boolean']>;
  /** When true, the fee is applied to Sonsored Products campaigns. */
  isSponsoredProductsManagedServiceFee?: Maybe<Scalars['Boolean']>;
  /** The date when the fee is active. This is null when a fee is not yet active. */
  startDate?: Maybe<Scalars['DateTime']>;
  /** The fee charged to the supply side of the account */
  supplySideFee?: Maybe<Scalars['Money']>;
};

/** TODO: add description */
export type AccountSettings = {
  __typename?: 'AccountSettings';
  something?: Maybe<Scalars['String']>;
};

export enum AccountType {
  Demand = 'DEMAND',
  Supply = 'SUPPLY'
}

/** TODO: add description */
export type AccountWhiteLabelSettings = {
  __typename?: 'AccountWhiteLabelSettings';
  secondThing?: Maybe<Scalars['String']>;
  thing?: Maybe<Scalars['String']>;
};

export type Advertiser = {
  __typename?: 'Advertiser';
  campaigns?: Maybe<CampaignList>;
  id: Scalars['ID'];
  name: Scalars['String'];
};

export type AdvertiserList = {
  __typename?: 'AdvertiserList';
  advertisers?: Maybe<Array<Maybe<Advertiser>>>;
  cursor?: Maybe<Scalars['String']>;
  hasMore?: Maybe<Scalars['Boolean']>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  totalCount?: Maybe<Scalars['Int']>;
};

export type Attribute = BooleanAttribute | DateTimeAttribute | NumberAttribute | StringAttribute;

/** Generic audiance */
export type Audience = {
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  segments: Array<Maybe<Segment>>;
};


/** Generic audiance */
export type AudienceSegmentsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

/** Audience List */
export type AudienceList = {
  __typename?: 'AudienceList';
  audiences: Array<Maybe<Audience>>;
  cursor?: Maybe<Scalars['String']>;
  hasMore?: Maybe<Scalars['Boolean']>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  totalCount?: Maybe<Scalars['Int']>;
};

export type BooleanAttribute = {
  __typename?: 'BooleanAttribute';
  key: Scalars['String'];
  value?: Maybe<Scalars['Boolean']>;
};

/** Brands are marketing and identity forms of business entities. */
export type Brand = {
  __typename?: 'Brand';
  brandValue?: Maybe<Scalars['Int']>;
  campaigns?: Maybe<CampaignList>;
  country?: Maybe<Scalars['String']>;
  foundedBy?: Maybe<Scalars['String']>;
  foundedIn?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  industry?: Maybe<Scalars['String']>;
  keyPeople?: Maybe<Scalars['String']>;
  lineItems?: Maybe<Array<Maybe<Lineitem>>>;
  name: Scalars['String'];
  rank?: Maybe<Scalars['Int']>;
  rating?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type BrandList = {
  __typename?: 'BrandList';
  brands: Array<Maybe<Brand>>;
  cursor?: Maybe<Scalars['String']>;
  hasMore?: Maybe<Scalars['Boolean']>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  totalCount?: Maybe<Scalars['Int']>;
};

export enum BudgetType {
  Daily = 'Daily',
  Hourly = 'Hourly',
  Monthly = 'Monthly',
  Total = 'Total'
}

/** Retail Campaign */
export type Campaign = {
  __typename?: 'Campaign';
  /** Account to which the campaign belongs */
  account?: Maybe<Account>;
  advertise?: Maybe<Advertiser>;
  advertiser?: Maybe<Advertiser>;
  /** list of brands in the campaign */
  brands?: Maybe<Array<Brand>>;
  /** Budget for the campaign */
  budget?: Maybe<CampaignBudget>;
  eligibility?: Maybe<CampaignEligibility>;
  /** End date of the campaign */
  endDate?: Maybe<Scalars['DateTime']>;
  /** External Id of the account to which the campaign belongs */
  externalAccountId?: Maybe<Scalars['ID']>;
  /** External Id of the campaign, if any */
  externalCampaignId?: Maybe<Scalars['ID']>;
  id: Scalars['ID'];
  isLockout?: Maybe<Scalars['Boolean']>;
  /** list of lineitems in the campaign */
  lineitems?: Maybe<LineitemList>;
  /** Name of the campaign */
  name?: Maybe<Scalars['String']>;
  /** retailer IDs for the campaign */
  retailerIds?: Maybe<Array<Scalars['ID']>>;
  /** relailers in the campaign */
  retailers?: Maybe<Array<Retailer>>;
  /** Start date of the campaign */
  startDate?: Maybe<Scalars['DateTime']>;
  /** Status of the campaign: Active, Paused, Archived */
  status?: Maybe<CampaignStatus>;
  /** Type of the campaign: Sponsored Products or Commerce Display */
  type?: Maybe<CampaignType>;
};

/** Budget structure of Retail Campaign */
export type CampaignBudget = {
  __typename?: 'CampaignBudget';
  amount?: Maybe<Scalars['Money']>;
  cappedBudgetAmount?: Maybe<Scalars['Money']>;
  dailyPacing?: Maybe<Scalars['Money']>;
  isCapped?: Maybe<Scalars['Boolean']>;
  monthlyPacing?: Maybe<Scalars['Money']>;
  type?: Maybe<BudgetType>;
};

/** Frequency Capping structure for Retail Campaign */
export type CampaignCapping = {
  __typename?: 'CampaignCapping';
  campaign?: Maybe<Campaign>;
  count?: Maybe<Scalars['Int']>;
  duration?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
};

export enum CampaignEligibility {
  Auction = 'Auction',
  Offsite = 'Offsite',
  OffsiteCpc = 'OffsiteCpc',
  Preferred = 'Preferred',
  Unknown = 'Unknown'
}

export type CampaignList = ListPage & {
  __typename?: 'CampaignList';
  campaigns?: Maybe<Array<Maybe<Campaign>>>;
  page?: Maybe<Scalars['Int']>;
  size?: Maybe<Scalars['Int']>;
  totalCount?: Maybe<Scalars['Int']>;
};

export enum CampaignStatus {
  Active = 'Active',
  Ended = 'Ended',
  Inactive = 'Inactive',
  Scheduled = 'Scheduled',
  Unknown = 'Unknown'
}

export enum CampaignType {
  CommerceDisplay = 'CommerceDisplay',
  SponsoredProducts = 'SponsoredProducts',
  Unknown = 'Unknown'
}

/** Country */
export type Country = {
  __typename?: 'Country';
  /** ISO 3166 country code */
  code: CountryCode;
  /** currency used in country */
  currency: CurrencyCode;
  isActiveForAccount: Scalars['Boolean'];
  name: Scalars['String'];
};

/** ISO 3166 country codes */
export enum CountryCode {
  /** Andorra */
  Ad = 'AD',
  /** United Arab Emirates */
  Ae = 'AE',
  /** Afghanistan */
  Af = 'AF',
  /** Antigua and Barbuda */
  Ag = 'AG',
  /** Anguilla */
  Ai = 'AI',
  /** Albania */
  Al = 'AL',
  /** Armenia */
  Am = 'AM',
  /** Netherlands Antilles */
  An = 'AN',
  /** Angola */
  Ao = 'AO',
  /** Antarctica */
  Aq = 'AQ',
  /** Argentina */
  Ar = 'AR',
  /** American Samoa */
  As = 'AS',
  /** Austria */
  At = 'AT',
  /** Australia */
  Au = 'AU',
  /** Aruba */
  Aw = 'AW',
  /** Åland Islands */
  Ax = 'AX',
  /** Azerbaijan */
  Az = 'AZ',
  /** Bosnia and Herzegovina */
  Ba = 'BA',
  /** Barbados */
  Bb = 'BB',
  /** Bangladesh */
  Bd = 'BD',
  /** Belgium */
  Be = 'BE',
  /** Burkina Faso */
  Bf = 'BF',
  /** Bulgaria */
  Bg = 'BG',
  /** Bahrain */
  Bh = 'BH',
  /** Burundi */
  Bi = 'BI',
  /** Benin */
  Bj = 'BJ',
  /** Saint Barthélemy */
  Bl = 'BL',
  /** Bermuda */
  Bm = 'BM',
  /** Brunei Darussalam */
  Bn = 'BN',
  /** Bolivia (Plurinational State of) */
  Bo = 'BO',
  /** "Bonaire, Sint Eustatius and Saba" */
  Bq = 'BQ',
  /** Brazil */
  Br = 'BR',
  /** Bahamas */
  Bs = 'BS',
  /** Bhutan */
  Bt = 'BT',
  /** Bouvet Island */
  Bv = 'BV',
  /** Botswana */
  Bw = 'BW',
  /** Belarus */
  By = 'BY',
  /** Belize */
  Bz = 'BZ',
  /** Canada */
  Ca = 'CA',
  /** Cocos (Keeling) Islands */
  Cc = 'CC',
  /** "Congo, Democratic Republic of the" */
  Cd = 'CD',
  /** Central African Republic */
  Cf = 'CF',
  /** Congo */
  Cg = 'CG',
  /** Switzerland */
  Ch = 'CH',
  /** Côte d'Ivoire */
  Ci = 'CI',
  /** Cook Islands */
  Ck = 'CK',
  /** Chile */
  Cl = 'CL',
  /** Cameroon */
  Cm = 'CM',
  /** China */
  Cn = 'CN',
  /** Colombia */
  Co = 'CO',
  /** Costa Rica */
  Cr = 'CR',
  /** Cuba */
  Cu = 'CU',
  /** Cabo Verde */
  Cv = 'CV',
  /** Curaçao */
  Cw = 'CW',
  /** Christmas Island */
  Cx = 'CX',
  /** Cyprus */
  Cy = 'CY',
  /** Czechia */
  Cz = 'CZ',
  /** Germany */
  De = 'DE',
  /** Djibouti */
  Dj = 'DJ',
  /** Denmark */
  Dk = 'DK',
  /** Dominica */
  Dm = 'DM',
  /** Dominican Republic */
  Do = 'DO',
  /** Algeria */
  Dz = 'DZ',
  /** Ecuador */
  Ec = 'EC',
  /** Estonia */
  Ee = 'EE',
  /** Egypt */
  Eg = 'EG',
  /** Western Sahara */
  Eh = 'EH',
  /** Eritrea */
  Er = 'ER',
  /** Spain */
  Es = 'ES',
  /** Ethiopia */
  Et = 'ET',
  /** Finland */
  Fi = 'FI',
  /** Fiji */
  Fj = 'FJ',
  /** Falkland Islands (Malvinas) */
  Fk = 'FK',
  /** Micronesia (Federated States of) */
  Fm = 'FM',
  /** Faroe Islands */
  Fo = 'FO',
  /** France */
  Fr = 'FR',
  /** Gabon */
  Ga = 'GA',
  /** United Kingdom of Great Britain and Northern Ireland */
  Gb = 'GB',
  /** Grenada */
  Gd = 'GD',
  /** Georgia */
  Ge = 'GE',
  /** French Guiana */
  Gf = 'GF',
  /** Guernsey */
  Gg = 'GG',
  /** Ghana */
  Gh = 'GH',
  /** Gibraltar */
  Gi = 'GI',
  /** Greenland */
  Gl = 'GL',
  /** Gambia */
  Gm = 'GM',
  /** Guinea */
  Gn = 'GN',
  /** Guadeloupe */
  Gp = 'GP',
  /** Equatorial Guinea */
  Gq = 'GQ',
  /** Greece */
  Gr = 'GR',
  /** South Georgia and the South Sandwich Islands */
  Gs = 'GS',
  /** Guatemala */
  Gt = 'GT',
  /** Guam */
  Gu = 'GU',
  /** Guinea-Bissau */
  Gw = 'GW',
  /** Guyana */
  Gy = 'GY',
  /** Hong Kong */
  Hk = 'HK',
  /** Heard Island and McDonald Islands */
  Hm = 'HM',
  /** Honduras */
  Hn = 'HN',
  /** Croatia */
  Hr = 'HR',
  /** Haiti */
  Ht = 'HT',
  /** Hungary */
  Hu = 'HU',
  /** Indonesia */
  Id = 'ID',
  /** Ireland */
  Ie = 'IE',
  /** Israel */
  Il = 'IL',
  /** Isle of Man */
  Im = 'IM',
  /** India */
  In = 'IN',
  /** British Indian Ocean Territory */
  Io = 'IO',
  /** Iraq */
  Iq = 'IQ',
  /** Iran (Islamic Republic of) */
  Ir = 'IR',
  /** Iceland */
  Is = 'IS',
  /** Italy */
  It = 'IT',
  /** Jersey */
  Je = 'JE',
  /** Jamaica */
  Jm = 'JM',
  /** Jordan */
  Jo = 'JO',
  /** Japan */
  Jp = 'JP',
  /** Kenya */
  Ke = 'KE',
  /** Kyrgyzstan */
  Kg = 'KG',
  /** Cambodia */
  Kh = 'KH',
  /** Kiribati */
  Ki = 'KI',
  /** Comoros */
  Km = 'KM',
  /** Saint Kitts and Nevis */
  Kn = 'KN',
  /** Korea (Democratic People's Republic of) */
  Kp = 'KP',
  /** "Korea, Republic of" */
  Kr = 'KR',
  /** Kuwait */
  Kw = 'KW',
  /** Cayman Islands */
  Ky = 'KY',
  /** Kazakhstan */
  Kz = 'KZ',
  /** Lao People's Democratic Republic */
  La = 'LA',
  /** Lebanon */
  Lb = 'LB',
  /** Saint Lucia */
  Lc = 'LC',
  /** Liechtenstein */
  Li = 'LI',
  /** Sri Lanka */
  Lk = 'LK',
  /** Liberia */
  Lr = 'LR',
  /** Lesotho */
  Ls = 'LS',
  /** Lithuania */
  Lt = 'LT',
  /** Luxembourg */
  Lu = 'LU',
  /** Latvia */
  Lv = 'LV',
  /** Libya */
  Ly = 'LY',
  /** Morocco */
  Ma = 'MA',
  /** Monaco */
  Mc = 'MC',
  /** "Moldova, Republic of" */
  Md = 'MD',
  /** Montenegro */
  Me = 'ME',
  /** Saint Martin (French part) */
  Mf = 'MF',
  /** Madagascar */
  Mg = 'MG',
  /** Marshall Islands */
  Mh = 'MH',
  /** North Macedonia */
  Mk = 'MK',
  /** Mali */
  Ml = 'ML',
  /** Myanmar */
  Mm = 'MM',
  /** Mongolia */
  Mn = 'MN',
  /** Macao */
  Mo = 'MO',
  /** Northern Mariana Islands */
  Mp = 'MP',
  /** Martinique */
  Mq = 'MQ',
  /** Mauritania */
  Mr = 'MR',
  /** Montserrat */
  Ms = 'MS',
  /** Malta */
  Mt = 'MT',
  /** Mauritius */
  Mu = 'MU',
  /** Maldives */
  Mv = 'MV',
  /** Malawi */
  Mw = 'MW',
  /** Mexico */
  Mx = 'MX',
  /** Malaysia */
  My = 'MY',
  /** Mozambique */
  Mz = 'MZ',
  /** Namibia */
  Na = 'NA',
  /** New Caledonia */
  Nc = 'NC',
  /** Niger */
  Ne = 'NE',
  /** Norfolk Island */
  Nf = 'NF',
  /** Nigeria */
  Ng = 'NG',
  /** Nicaragua */
  Ni = 'NI',
  /** Netherlands */
  Nl = 'NL',
  /** Norway */
  No = 'NO',
  /** Nepal */
  Np = 'NP',
  /** Nauru */
  Nr = 'NR',
  /** Niue */
  Nu = 'NU',
  /** New Zealand */
  Nz = 'NZ',
  /** Oman */
  Om = 'OM',
  /** Panama */
  Pa = 'PA',
  /** Peru */
  Pe = 'PE',
  /** French Polynesia */
  Pf = 'PF',
  /** Papua New Guinea */
  Pg = 'PG',
  /** Philippines */
  Ph = 'PH',
  /** Pakistan */
  Pk = 'PK',
  /** Poland */
  Pl = 'PL',
  /** Saint Pierre and Miquelon */
  Pm = 'PM',
  /** Pitcairn */
  Pn = 'PN',
  /** Puerto Rico */
  Pr = 'PR',
  /** "Palestine, State of" */
  Ps = 'PS',
  /** Portugal */
  Pt = 'PT',
  /** Palau */
  Pw = 'PW',
  /** Paraguay */
  Py = 'PY',
  /** Qatar */
  Qa = 'QA',
  /** Réunion */
  Re = 'RE',
  /** Romania */
  Ro = 'RO',
  /** Serbia */
  Rs = 'RS',
  /** Russian Federation */
  Ru = 'RU',
  /** Rwanda */
  Rw = 'RW',
  /** Saudi Arabia */
  Sa = 'SA',
  /** Solomon Islands */
  Sb = 'SB',
  /** Seychelles */
  Sc = 'SC',
  /** Sudan */
  Sd = 'SD',
  /** Sweden */
  Se = 'SE',
  /** Singapore */
  Sg = 'SG',
  /** "Saint Helena, Ascension and Tristan da Cunha" */
  Sh = 'SH',
  /** Slovenia */
  Si = 'SI',
  /** Svalbard and Jan Mayen */
  Sj = 'SJ',
  /** Slovakia */
  Sk = 'SK',
  /** Sierra Leone */
  Sl = 'SL',
  /** San Marino */
  Sm = 'SM',
  /** Senegal */
  Sn = 'SN',
  /** Somalia */
  So = 'SO',
  /** Suriname */
  Sr = 'SR',
  /** South Sudan */
  Ss = 'SS',
  /** Sao Tome and Principe */
  St = 'ST',
  /** El Salvador */
  Sv = 'SV',
  /** Sint Maarten (Dutch part) */
  Sx = 'SX',
  /** Syrian Arab Republic */
  Sy = 'SY',
  /** Eswatini */
  Sz = 'SZ',
  /** Turks and Caicos Islands */
  Tc = 'TC',
  /** Chad */
  Td = 'TD',
  /** French Southern Territories */
  Tf = 'TF',
  /** Togo */
  Tg = 'TG',
  /** Thailand */
  Th = 'TH',
  /** Tajikistan */
  Tj = 'TJ',
  /** Tokelau */
  Tk = 'TK',
  /** Timor-Leste */
  Tl = 'TL',
  /** Turkmenistan */
  Tm = 'TM',
  /** Tunisia */
  Tn = 'TN',
  /** Tonga */
  To = 'TO',
  /** East Timor */
  Tp = 'TP',
  /** Turkey */
  Tr = 'TR',
  /** Trinidad and Tobago */
  Tt = 'TT',
  /** Tuvalu */
  Tv = 'TV',
  /** "Taiwan, Province of China" */
  Tw = 'TW',
  /** "Tanzania, United Republic of" */
  Tz = 'TZ',
  /** Ukraine */
  Ua = 'UA',
  /** Uganda */
  Ug = 'UG',
  /** United States Minor Outlying Islands */
  Um = 'UM',
  /** United States of America */
  Us = 'US',
  Usaf = 'USAF',
  /** Uruguay */
  Uy = 'UY',
  /** Uzbekistan */
  Uz = 'UZ',
  /** Holy See */
  Va = 'VA',
  /** Saint Vincent and the Grenadines */
  Vc = 'VC',
  /** Venezuela (Bolivarian Republic of) */
  Ve = 'VE',
  /** Virgin Islands (British) */
  Vg = 'VG',
  /** Virgin Islands (U.S.) */
  Vi = 'VI',
  /** Viet Nam */
  Vn = 'VN',
  /** Vanuatu */
  Vu = 'VU',
  /** Wallis and Futuna */
  Wf = 'WF',
  /** Samoa */
  Ws = 'WS',
  /** Yemen */
  Ye = 'YE',
  /** Mayotte */
  Yt = 'YT',
  /** South Africa */
  Za = 'ZA',
  /** Zambia */
  Zm = 'ZM',
  /** Zimbabwe */
  Zw = 'ZW'
}

/** TODO: add description */
export type CountrySettings = {
  __typename?: 'CountrySettings';
  secondThing?: Maybe<Scalars['String']>;
  thing?: Maybe<Scalars['String']>;
};

export type Creative = {
  __typename?: 'Creative';
  campaign?: Maybe<Campaign>;
  id: Scalars['ID'];
};

/** Currency */
export type Currency = {
  __typename?: 'Currency';
  /** ISO 4217 currency code */
  code: CurrencyCode;
  /** Currency name */
  name?: Maybe<Scalars['String']>;
  /** Currency Symbol */
  symbol?: Maybe<Scalars['String']>;
};

/** ISO 4217 currency codes */
export enum CurrencyCode {
  /** UAE Dirham */
  Aed = 'AED',
  /** Afghani */
  Afn = 'AFN',
  /** Lek */
  All = 'ALL',
  /** Armenian Dram */
  Amd = 'AMD',
  /** Netherlands Antillean Guilder */
  Ang = 'ANG',
  /** Kwanza */
  Aoa = 'AOA',
  Aqd = 'AQD',
  /** Argentine Peso */
  Ars = 'ARS',
  /** Australian Dollar */
  Aud = 'AUD',
  /** Aruban Florin */
  Awg = 'AWG',
  /** Azerbaijan Manat */
  Azn = 'AZN',
  /** Convertible Mark */
  Bam = 'BAM',
  /** Barbados Dollar */
  Bbd = 'BBD',
  /** Taka */
  Bdt = 'BDT',
  /** Bulgarian Lev */
  Bgn = 'BGN',
  /** Bahraini Dinar */
  Bhd = 'BHD',
  /** Burundi Franc */
  Bif = 'BIF',
  /** Bermudian Dollar */
  Bmd = 'BMD',
  /** Brunei Dollar */
  Bnd = 'BND',
  /** Boliviano */
  Bob = 'BOB',
  /** Mvdol */
  Bov = 'BOV',
  /** Brazilian Real */
  Brl = 'BRL',
  /** Bahamian Dollar */
  Bsd = 'BSD',
  /** Ngultrum */
  Btn = 'BTN',
  /** Pula */
  Bwp = 'BWP',
  /** Belarusian Ruble */
  Byn = 'BYN',
  /** Belarus Ruble */
  Byr = 'BYR',
  /** Belize Dollar */
  Bzd = 'BZD',
  /** Canadian Dollar */
  Cad = 'CAD',
  /** Congolese Franc */
  Cdf = 'CDF',
  /** WIR Euro */
  Che = 'CHE',
  /** Swiss Franc */
  Chf = 'CHF',
  /** WIR Franc */
  Chw = 'CHW',
  /** Unidad de Fomento */
  Clf = 'CLF',
  /** Chilean Peso */
  Clp = 'CLP',
  /** Yuan Renminbi */
  Cny = 'CNY',
  /** Colombian Peso */
  Cop = 'COP',
  /** Unidad de Valor Real */
  Cou = 'COU',
  /** Costa Rican Colon */
  Crc = 'CRC',
  /** Peso Convertible */
  Cuc = 'CUC',
  /** Cuban Peso */
  Cup = 'CUP',
  /** Cabo Verde Escudo */
  Cve = 'CVE',
  Cyp = 'CYP',
  /** Czech Koruna */
  Czk = 'CZK',
  /** Djibouti Franc */
  Djf = 'DJF',
  /** Danish Krone */
  Dkk = 'DKK',
  /** Dominican Peso */
  Dop = 'DOP',
  /** Algerian Dinar */
  Dzd = 'DZD',
  Ecs = 'ECS',
  Eek = 'EEK',
  /** Egyptian Pound */
  Egp = 'EGP',
  /** Nakfa */
  Ern = 'ERN',
  /** Ethiopian Birr */
  Etb = 'ETB',
  /** Euro */
  Eur = 'EUR',
  /** Fiji Dollar */
  Fjd = 'FJD',
  /** Falkland Islands Pound */
  Fkp = 'FKP',
  /** Pound Sterling */
  Gbp = 'GBP',
  /** Lari */
  Gel = 'GEL',
  Ggp = 'GGP',
  /** Ghana Cedi */
  Ghs = 'GHS',
  /** Gibraltar Pound */
  Gip = 'GIP',
  /** Dalasi */
  Gmd = 'GMD',
  /** Guinean Franc */
  Gnf = 'GNF',
  /** Quetzal */
  Gtq = 'GTQ',
  /** Guyana Dollar */
  Gyd = 'GYD',
  /** Hong Kong Dollar */
  Hkd = 'HKD',
  /** Lempira */
  Hnl = 'HNL',
  /** Kuna */
  Hrk = 'HRK',
  /** Gourde */
  Htg = 'HTG',
  /** Forint */
  Huf = 'HUF',
  /** Rupiah */
  Idr = 'IDR',
  /** New Israeli Sheqel */
  Ils = 'ILS',
  /** Indian Rupee */
  Inr = 'INR',
  /** Iraqi Dinar */
  Iqd = 'IQD',
  /** Iranian Rial */
  Irr = 'IRR',
  /** Iceland Krona */
  Isk = 'ISK',
  /** Jamaican Dollar */
  Jmd = 'JMD',
  /** Jordanian Dinar */
  Jod = 'JOD',
  /** Yen */
  Jpy = 'JPY',
  /** Kenyan Shilling */
  Kes = 'KES',
  /** Som */
  Kgs = 'KGS',
  /** Riel */
  Khr = 'KHR',
  /** Comorian Franc */
  Kmf = 'KMF',
  /** North Korean Won */
  Kpw = 'KPW',
  /** Won */
  Krw = 'KRW',
  /** Kuwaiti Dinar */
  Kwd = 'KWD',
  /** Cayman Islands Dollar */
  Kyd = 'KYD',
  /** Tenge */
  Kzt = 'KZT',
  /** Lao Kip */
  Lak = 'LAK',
  /** Lebanese Pound */
  Lbp = 'LBP',
  /** Sri Lanka Rupee */
  Lkr = 'LKR',
  /** Liberian Dollar */
  Lrd = 'LRD',
  /** Loti */
  Lsl = 'LSL',
  Ltl = 'LTL',
  Lvl = 'LVL',
  /** Libyan Dinar */
  Lyd = 'LYD',
  /** Moroccan Dirham */
  Mad = 'MAD',
  /** Moldovan Leu */
  Mdl = 'MDL',
  /** Malagasy Ariary */
  Mga = 'MGA',
  /** Denar */
  Mkd = 'MKD',
  /** Kyat */
  Mmk = 'MMK',
  /** Tugrik */
  Mnt = 'MNT',
  /** Pataca */
  Mop = 'MOP',
  Mro = 'MRO',
  /** Ouguiya */
  Mru = 'MRU',
  Mtl = 'MTL',
  /** Mauritius Rupee */
  Mur = 'MUR',
  /** Rufiyaa */
  Mvr = 'MVR',
  /** Malawi Kwacha */
  Mwk = 'MWK',
  /** Mexican Peso */
  Mxn = 'MXN',
  /** Mexican Unidad de Inversion (UDI) */
  Mxv = 'MXV',
  /** Malaysian Ringgit */
  Myr = 'MYR',
  /** Mozambique Metical */
  Mzn = 'MZN',
  /** Namibia Dollar */
  Nad = 'NAD',
  /** Naira */
  Ngn = 'NGN',
  /** Cordoba Oro */
  Nio = 'NIO',
  /** Norwegian Krone */
  Nok = 'NOK',
  /** Nepalese Rupee */
  Npr = 'NPR',
  /** New Zealand Dollar */
  Nzd = 'NZD',
  /** Rial Omani */
  Omr = 'OMR',
  /** Balboa */
  Pab = 'PAB',
  /** Sol */
  Pen = 'PEN',
  /** Kina */
  Pgk = 'PGK',
  /** Philippine Peso */
  Php = 'PHP',
  /** Pakistan Rupee */
  Pkr = 'PKR',
  /** Zloty */
  Pln = 'PLN',
  /** Guarani */
  Pyg = 'PYG',
  /** Qatari Rial */
  Qar = 'QAR',
  /** Romanian Leu */
  Ron = 'RON',
  /** Serbian Dinar */
  Rsd = 'RSD',
  /** Russian Ruble */
  Rub = 'RUB',
  /** Rwanda Franc */
  Rwf = 'RWF',
  /** Saudi Riyal */
  Sar = 'SAR',
  /** Solomon Islands Dollar */
  Sbd = 'SBD',
  /** Seychelles Rupee */
  Scr = 'SCR',
  /** Sudanese Pound */
  Sdg = 'SDG',
  /** Swedish Krona */
  Sek = 'SEK',
  /** Singapore Dollar */
  Sgd = 'SGD',
  /** Saint Helena Pound */
  Shp = 'SHP',
  Skk = 'SKK',
  /** Leone */
  Sll = 'SLL',
  /** Somali Shilling */
  Sos = 'SOS',
  /** Surinam Dollar */
  Srd = 'SRD',
  Ssk = 'SSK',
  /** South Sudanese Pound */
  Ssp = 'SSP',
  Std = 'STD',
  /** Dobra */
  Stn = 'STN',
  /** El Salvador Colon */
  Svc = 'SVC',
  /** Syrian Pound */
  Syp = 'SYP',
  /** Lilangeni */
  Szl = 'SZL',
  /** Baht */
  Thb = 'THB',
  /** Somoni */
  Tjs = 'TJS',
  /** Turkmenistan New Manat */
  Tmt = 'TMT',
  /** Tunisian Dinar */
  Tnd = 'TND',
  /** Pa'anga */
  Top = 'TOP',
  /** Turkish Lira */
  Try = 'TRY',
  /** Trinidad and Tobago Dollar */
  Ttd = 'TTD',
  /** New Taiwan Dollar */
  Twd = 'TWD',
  /** Tanzanian Shilling */
  Tzs = 'TZS',
  /** Hryvnia */
  Uah = 'UAH',
  /** Uganda Shilling */
  Ugx = 'UGX',
  /** US Dollar */
  Usd = 'USD',
  /** Uruguay Peso en Unidades Indexadas (UI) */
  Uyi = 'UYI',
  /** Peso Uruguayo */
  Uyu = 'UYU',
  /** Unidad Previsional */
  Uyw = 'UYW',
  /** Uzbekistan Sum */
  Uzs = 'UZS',
  Vef = 'VEF',
  /** Bolívar Soberano */
  Ves = 'VES',
  /** Dong */
  Vnd = 'VND',
  /** Vatu */
  Vuv = 'VUV',
  /** Tala */
  Wst = 'WST',
  /** CFA Franc BEAC */
  Xaf = 'XAF',
  /** Silver */
  Xag = 'XAG',
  /** Gold */
  Xau = 'XAU',
  /** Bond Markets Unit European Composite Unit (EURCO) */
  Xba = 'XBA',
  /** Bond Markets Unit European Monetary Unit (E.M.U.-6) */
  Xbb = 'XBB',
  /** Bond Markets Unit European Unit of Account 9 (E.U.A.-9) */
  Xbc = 'XBC',
  /** Bond Markets Unit European Unit of Account 17 (E.U.A.-17) */
  Xbd = 'XBD',
  /** East Caribbean Dollar */
  Xcd = 'XCD',
  /** SDR (Special Drawing Right) */
  Xdr = 'XDR',
  /** CFA Franc BCEAO */
  Xof = 'XOF',
  /** Palladium */
  Xpd = 'XPD',
  /** CFP Franc */
  Xpf = 'XPF',
  /** Platinum */
  Xpt = 'XPT',
  /** Sucre */
  Xsu = 'XSU',
  /** Codes specifically reserved for testing purposes */
  Xts = 'XTS',
  /** ADB Unit of Account */
  Xua = 'XUA',
  /** Yemeni Rial */
  Yer = 'YER',
  /** Rand */
  Zar = 'ZAR',
  Zmk = 'ZMK',
  /** Zambian Kwacha */
  Zmw = 'ZMW',
  Zwd = 'ZWD',
  /** Zimbabwe Dollar */
  Zwl = 'ZWL'
}

/** TODO: add description */
export type CurrencySettings = {
  __typename?: 'CurrencySettings';
  something?: Maybe<Scalars['String']>;
};

export type DateTimeAttribute = {
  __typename?: 'DateTimeAttribute';
  key: Scalars['String'];
  value?: Maybe<Scalars['DateTime']>;
};

export type EmailAddress = {
  __typename?: 'EmailAddress';
  emailAddress?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  linkedTo?: Maybe<Array<Maybe<IdentificationLink>>>;
  verification?: Maybe<Verification>;
};

export type ExternalAccount = {
  __typename?: 'ExternalAccount';
  approvedScopes?: Maybe<Scalars['String']>;
  emailAddress?: Maybe<Scalars['String']>;
  externalId?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  identificationId?: Maybe<Scalars['String']>;
  imageUrl?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  publicMetadata?: Maybe<Array<Maybe<Attribute>>>;
  username?: Maybe<Scalars['String']>;
  verification?: Maybe<Verification>;
};

export enum FinancialStatus {
  Active = 'Active',
  BudgetHitDaily = 'BudgetHitDaily',
  BudgetHitMonthly = 'BudgetHitMonthly',
  BudgetHitTotal = 'BudgetHitTotal',
  NoFunds = 'NoFunds',
  Unknown = 'Unknown'
}

export type IdentificationLink = {
  __typename?: 'IdentificationLink';
  id?: Maybe<Scalars['ID']>;
  type?: Maybe<Scalars['String']>;
};

export type Lineitem = {
  __typename?: 'Lineitem';
  audience?: Maybe<Audience>;
  budget?: Maybe<LineitemBudget>;
  campaign?: Maybe<Campaign>;
  creatives?: Maybe<Array<Maybe<Creative>>>;
  endDate?: Maybe<Scalars['DateTime']>;
  financialStatus?: Maybe<FinancialStatus>;
  id: Scalars['ID'];
  name: Scalars['String'];
  pages?: Maybe<Array<Maybe<LineitemPage>>>;
  retailer?: Maybe<Retailer>;
  startDate?: Maybe<Scalars['DateTime']>;
  status?: Maybe<LineitemStatus>;
};

export type LineitemBudget = {
  __typename?: 'LineitemBudget';
  amount?: Maybe<Scalars['Money']>;
  isCapped?: Maybe<Scalars['Boolean']>;
  type?: Maybe<BudgetType>;
};

export type LineitemList = ListOffsetLimit & {
  __typename?: 'LineitemList';
  limit?: Maybe<Scalars['Int']>;
  lineitems?: Maybe<Array<Maybe<Lineitem>>>;
  offset?: Maybe<Scalars['Int']>;
  totalCount?: Maybe<Scalars['Int']>;
};

export type LineitemPage = {
  __typename?: 'LineitemPage';
  environment?: Maybe<PageEnvironment>;
  includeSubchildren?: Maybe<Scalars['Boolean']>;
  isExclusion?: Maybe<Scalars['Boolean']>;
  taxonomy?: Maybe<Scalars['String']>;
  type?: Maybe<PageType>;
};

export enum LineitemStatus {
  Active = 'Active',
  Archived = 'Archived',
  Paused = 'Paused'
}

/** Cursor Pagination */
export type ListCursor = {
  /** The cursor to start returning results from */
  cursor?: Maybe<Scalars['String']>;
  /** The maximum number of items to return */
  limit?: Maybe<Scalars['Int']>;
  /** Total number of items in the list */
  totalCount?: Maybe<Scalars['Int']>;
};

/** Offset and Limit Pagination */
export type ListOffsetLimit = {
  /** The maximum number of items to return */
  limit?: Maybe<Scalars['Int']>;
  /** The offset in the collection */
  offset?: Maybe<Scalars['Int']>;
  /** Total number of items in the list */
  totalCount?: Maybe<Scalars['Int']>;
};

/** Page style Pagination */
export type ListPage = {
  /** The page to start returning results from */
  page?: Maybe<Scalars['Int']>;
  /** The maximum number of items to return */
  size?: Maybe<Scalars['Int']>;
  /** Total number of items in the list */
  totalCount?: Maybe<Scalars['Int']>;
};

/**
 * Look back window is the attribution window and refers to the acceptable number of days between the click and the conversion.
 *
 * See: https://criteo.atlassian.net/wiki/spaces/RMP/pages/1503109321/8.1.7.4.+Attribution+-+Look-back+Windows+and+How+to+Customize+Them
 */
export enum LookbackWindow {
  /** 30 Days */
  OneMonth = 'OneMonth',
  /** 7 Days */
  OneWeek = 'OneWeek',
  /** 14 Days */
  TwoWeeks = 'TwoWeeks'
}

/** SKU matching level is used in Attribution and is the level of granularity at which the SKU is matched. */
export enum MatchLevel {
  /** Matches on the exact SKU */
  Sku = 'Sku',
  /** Matches on SKU Category */
  SkuCategory = 'SkuCategory',
  /** Matches on SKU Category and SKU Brand */
  SkuCategoryBrand = 'SkuCategoryBrand'
}

export type Mutation = {
  __typename?: 'Mutation';
  /** activates the Lineitems by ID and returns the lineitems */
  activateLineitems: Array<Maybe<Lineitem>>;
  activateRetailer?: Maybe<Retailer>;
  addAccountSeller?: Maybe<Seller>;
  addDemandAccountBrands?: Maybe<Array<Maybe<Brand>>>;
  addRemoveBrandsToPortfolio?: Maybe<Portfolio>;
  addTaxonomyManually?: Maybe<Sku>;
  addUser?: Maybe<User>;
  applyAccountFees?: Maybe<AccountFee>;
  /** archives the Lineitems by ID and returns the lineitems */
  archiveLineitems: Array<Maybe<Lineitem>>;
  configureTOP?: Maybe<Scalars['Boolean']>;
  connectAccountToRetailer?: Maybe<Account>;
  deactivateRetailer?: Maybe<Retailer>;
  enableBrandedKeywords?: Maybe<Account>;
  grantBrandAccessForUser?: Maybe<Portfolio>;
  mapAccountRetailers?: Maybe<Array<Maybe<Retailer>>>;
  modifyAccoutSettings?: Maybe<AccountSettings>;
  modifyCountrySettings?: Maybe<CountrySettings>;
  modifyCurrencySettings?: Maybe<CurrencySettings>;
  modifyPortfolioName?: Maybe<Portfolio>;
  modifyReportingLabel?: Maybe<ReportingLabel>;
  newAccount?: Maybe<Account>;
  newBrand?: Maybe<Brand>;
  /** creates a new campaign and returns the campaign */
  newCampaign?: Maybe<Campaign>;
  /** creates a new lineitem and returns the lineitem */
  newLineitem?: Maybe<Lineitem>;
  newPortfolio?: Maybe<Portfolio>;
  newPrivateMarketAccount?: Maybe<PrivateMarketAccount>;
  newRetailer?: Maybe<Retailer>;
  /** pauses the Lineitems by ID and returns the lineitems */
  pauseLineitems: Array<Maybe<Lineitem>>;
  removeAccountRetailer?: Maybe<Retailer>;
  removeAccountSeller?: Maybe<Seller>;
  removeAccountUser?: Maybe<User>;
  removeBrandAccessForUser?: Maybe<User>;
  removeDemandAccountBrands?: Maybe<Array<Maybe<Brand>>>;
  removePortfolio?: Maybe<Portfolio>;
  removePortfolioFromAccount?: Maybe<Portfolio>;
  setRetailerPreferencesDefaultValues?: Maybe<RetailerPreferences>;
  setupWhiteLabelSettings?: Maybe<AccountWhiteLabelSettings>;
  updateSKUs?: Maybe<Array<Maybe<Sku>>>;
  updateUser?: Maybe<User>;
  updateUserName?: Maybe<User>;
  updateWhiteLabelSettings?: Maybe<AccountWhiteLabelSettings>;
};


export type MutationActivateLineitemsArgs = {
  lineitemIds: Array<InputMaybe<Scalars['ID']>>;
};


export type MutationActivateRetailerArgs = {
  id: Scalars['ID'];
};


export type MutationAddAccountSellerArgs = {
  accountId: Scalars['ID'];
  sellerId: Scalars['ID'];
};


export type MutationAddDemandAccountBrandsArgs = {
  accountId: Scalars['ID'];
  brandIds: Array<Scalars['ID']>;
};


export type MutationAddRemoveBrandsToPortfolioArgs = {
  brandIds: Array<Scalars['ID']>;
  portfolioId: Scalars['ID'];
};


export type MutationAddTaxonomyManuallyArgs = {
  skyKey: Scalars['ID'];
  taxonomy: Array<Scalars['String']>;
};


export type MutationAddUserArgs = {
  accountId: Scalars['ID'];
  userId: Scalars['ID'];
};


export type MutationApplyAccountFeesArgs = {
  accountId: Scalars['ID'];
  fees: NewAccountFee;
};


export type MutationArchiveLineitemsArgs = {
  lineitemIds: Array<InputMaybe<Scalars['ID']>>;
};


export type MutationConnectAccountToRetailerArgs = {
  accountId: Scalars['ID'];
  retailerId: Scalars['ID'];
};


export type MutationDeactivateRetailerArgs = {
  id: Scalars['ID'];
};


export type MutationEnableBrandedKeywordsArgs = {
  accountId: Scalars['ID'];
};


export type MutationGrantBrandAccessForUserArgs = {
  brandId: Scalars['ID'];
  portfolioId: Scalars['ID'];
  userId: Scalars['ID'];
};


export type MutationMapAccountRetailersArgs = {
  accountId: Scalars['ID'];
  retailerIds: Array<InputMaybe<Scalars['ID']>>;
};


export type MutationModifyAccoutSettingsArgs = {
  accountId: Scalars['ID'];
  settings: UpdateAccountSettings;
};


export type MutationModifyCountrySettingsArgs = {
  accountId: Scalars['ID'];
  countryId?: InputMaybe<Scalars['ID']>;
};


export type MutationModifyCurrencySettingsArgs = {
  accountId: Scalars['ID'];
  currency: CurrencyCode;
};


export type MutationModifyPortfolioNameArgs = {
  name: Scalars['String'];
  portfolioId: Scalars['ID'];
};


export type MutationModifyReportingLabelArgs = {
  accountId: Scalars['ID'];
  label: Scalars['String'];
};


export type MutationNewAccountArgs = {
  account: NewAccount;
};


export type MutationNewBrandArgs = {
  brand: NewBrand;
};


export type MutationNewCampaignArgs = {
  advertiserId: Scalars['ID'];
  campaign: NewCampaign;
};


export type MutationNewLineitemArgs = {
  campaignId: Scalars['ID'];
  lineitem: NewLineitem;
};


export type MutationNewPortfolioArgs = {
  portfolio: NewPortfolio;
};


export type MutationNewPrivateMarketAccountArgs = {
  accountId: Scalars['ID'];
  privateMarketAccount: NewPrivateMarketAccount;
};


export type MutationNewRetailerArgs = {
  retailer: NewRetailer;
};


export type MutationPauseLineitemsArgs = {
  lineitemIds: Array<InputMaybe<Scalars['ID']>>;
};


export type MutationRemoveAccountRetailerArgs = {
  accountId: Scalars['ID'];
  retailerId: Scalars['ID'];
};


export type MutationRemoveAccountSellerArgs = {
  accountId: Scalars['ID'];
  sellerId: Scalars['ID'];
};


export type MutationRemoveAccountUserArgs = {
  accountId: Scalars['ID'];
  userId: Scalars['ID'];
};


export type MutationRemoveBrandAccessForUserArgs = {
  brandId: Scalars['ID'];
  userId: Scalars['ID'];
};


export type MutationRemoveDemandAccountBrandsArgs = {
  accountId: Scalars['ID'];
  brandIds: Array<Scalars['ID']>;
};


export type MutationRemovePortfolioArgs = {
  portfolioId: Scalars['ID'];
};


export type MutationRemovePortfolioFromAccountArgs = {
  accountId: Scalars['ID'];
  portfolioId: Scalars['ID'];
};


export type MutationSetRetailerPreferencesDefaultValuesArgs = {
  preferences: NewDefaultPreferences;
};


export type MutationSetupWhiteLabelSettingsArgs = {
  accountId: Scalars['ID'];
  whiteLabelSettings: NewWhiteLabelSettings;
};


export type MutationUpdateSkUsArgs = {
  skuUpdates?: InputMaybe<Array<InputMaybe<SkuUpdate>>>;
};


export type MutationUpdateUserNameArgs = {
  accountId: Scalars['ID'];
  name: Scalars['String'];
  userId: Scalars['ID'];
};


export type MutationUpdateWhiteLabelSettingsArgs = {
  accountId: Scalars['ID'];
  whiteLabelSettings: UpdateWhiteLabelSettings;
};

export type NewAccount = {
  accountExternalId?: InputMaybe<Scalars['ID']>;
  allowBrandedKeywords: Scalars['Boolean'];
  countries: Array<InputMaybe<Scalars['ID']>>;
  currency: CurrencyCode;
  fee?: InputMaybe<NewAccountFee>;
  name: Scalars['String'];
  parentAccount?: InputMaybe<Scalars['ID']>;
  parentAccountLabel?: InputMaybe<Scalars['String']>;
  salesForceAccount?: InputMaybe<NewSalesForeAccount>;
  type: AccountType;
};

export type NewAccountFee = {
  accountServicingFee?: InputMaybe<Scalars['Money']>;
  demandSideFee: Scalars['Money'];
  endDate: Scalars['DateTime'];
  isCommerceDisplayManagedServiceFee?: InputMaybe<Scalars['Boolean']>;
  isSponsoredProductsManagedServiceFee?: InputMaybe<Scalars['Boolean']>;
  startDate: Scalars['DateTime'];
  supplySideFee: Scalars['Money'];
};

export type NewBrand = {
  name: Scalars['String'];
};

/** Input type for creating a new campaign (RM). */
export type NewCampaign = {
  /** budget for the campaign, including amount and budget type ( Total, Daily, Monthly, Hourly ) */
  budget: NewCampaignBudget;
  clickLookbackWindow?: InputMaybe<LookbackWindow>;
  clickMatchLevel?: InputMaybe<MatchLevel>;
  /** end date of the campaign */
  endDate: Scalars['DateTime'];
  isLockout?: InputMaybe<Scalars['Boolean']>;
  /** name of the campaign */
  name: Scalars['String'];
  /** start date of the campaign */
  startDate: Scalars['DateTime'];
  /** type of the campaign (Unknown, SponsoredProducts, CommerceDisplay) */
  type?: InputMaybe<CampaignType>;
  unexposedRate?: InputMaybe<Scalars['Money']>;
  viewLookbackWindow?: InputMaybe<LookbackWindow>;
  viewMatchLevel?: InputMaybe<MatchLevel>;
};

export type NewCampaignBudget = {
  amount?: InputMaybe<Scalars['Money']>;
  cappedBudgetAmount?: InputMaybe<Scalars['Money']>;
  dailyPacing?: InputMaybe<Scalars['Money']>;
  isCapped: Scalars['Boolean'];
  monthlyPacing?: InputMaybe<Scalars['Money']>;
  type: BudgetType;
};

export type NewDefaultPreferences = {
  defaultValues?: InputMaybe<Array<InputMaybe<NewDefaultValue>>>;
  retailerId: Scalars['ID'];
};

export type NewDefaultValue = {
  key: Scalars['String'];
  value: Scalars['String'];
};

export type NewLineitem = {
  budget: NewLineitemBudget;
  endDate: Scalars['DateTime'];
  name: Scalars['String'];
  pages: Array<NewLineitemPage>;
  startDate: Scalars['DateTime'];
};

export type NewLineitemBudget = {
  amount: Scalars['Money'];
  isCapped: Scalars['Boolean'];
  type: BudgetType;
};

export type NewLineitemPage = {
  Taxonomy: Scalars['String'];
  environment: PageEnvironment;
  includeSubchildren: Scalars['Boolean'];
  isExclusion: Scalars['Boolean'];
  type: PageType;
};

export type NewPortfolio = {
  account: Scalars['ID'];
  brands: Array<InputMaybe<Scalars['ID']>>;
  name: Scalars['String'];
};

export type NewPrivateMarketAccount = {
  account: Scalars['ID'];
  name: Scalars['String'];
};

export type NewRetailer = {
  name: Scalars['String'];
};

export type NewSalesForeAccount = {
  favoriteColor?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  shoeSize?: InputMaybe<Scalars['Float']>;
};

export type NewWhiteLabelSettings = {
  things?: InputMaybe<Scalars['String']>;
};

export type NumberAttribute = {
  __typename?: 'NumberAttribute';
  key: Scalars['String'];
  value?: Maybe<Scalars['Int']>;
};

/** Offsite audiance */
export type OffsiteAudience = Audience & {
  __typename?: 'OffsiteAudience';
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  segments: Array<Maybe<Segment>>;
};


/** Offsite audiance */
export type OffsiteAudienceSegmentsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

/** Onsite audiance */
export type OnsiteAudience = Audience & {
  __typename?: 'OnsiteAudience';
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  segments: Array<Maybe<Segment>>;
};


/** Onsite audiance */
export type OnsiteAudienceSegmentsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

export enum PageEnvironment {
  App = 'App',
  Mobile = 'Mobile',
  Web = 'Web'
}

export enum PageType {
  Brand = 'Brand',
  Category = 'Category',
  Other = 'Other',
  Product = 'Product',
  Search = 'Search'
}

export type PhoneNumber = {
  __typename?: 'PhoneNumber';
  defaultSecondFactor?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  linkedTo?: Maybe<Array<Maybe<IdentificationLink>>>;
  phoneNumber?: Maybe<Scalars['String']>;
  reservedForSecondFactor?: Maybe<Scalars['Boolean']>;
  verification?: Maybe<Verification>;
};

/** TODO: add description */
export type Portfolio = {
  __typename?: 'Portfolio';
  accounts?: Maybe<Array<Maybe<Account>>>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
};

export type PrivateMarketAccount = {
  __typename?: 'PrivateMarketAccount';
  favoriteColor?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  shoeSize?: Maybe<Scalars['Float']>;
};

export type Query = {
  __typename?: 'Query';
  /**
   * retrives a single account by ID
   * findAccount
   */
  account?: Maybe<Account>;
  /**
   * retrives a list of accounts for me, optionally filtered by name
   * if no accounts are fount an empty list will be returned
   */
  accounts: Array<Maybe<Account>>;
  advertiser?: Maybe<Advertiser>;
  /** Get all audiances */
  audience?: Maybe<Audience>;
  audiences: AudienceList;
  brand?: Maybe<Brand>;
  brands?: Maybe<BrandList>;
  /** retrives a single campaign by ID */
  campaign?: Maybe<Campaign>;
  /** retrives a list of campaigns for an account or retailer */
  campaigns?: Maybe<CampaignList>;
  /** Get a list of countries optionally filtered by name */
  countries: Array<Maybe<Country>>;
  /** Get a single country */
  country?: Maybe<Country>;
  /** Get a list of currencies optionally filtered by name */
  currencies: Array<Maybe<Currency>>;
  /** Get a single currency by id or code */
  currency?: Maybe<Currency>;
  /** retrives a single lineitem by ID */
  lineitem?: Maybe<Lineitem>;
  /** retrives a list of lineitems for a campaign */
  lineitems?: Maybe<LineitemList>;
  me?: Maybe<User>;
  retailer?: Maybe<Retailer>;
  retailers: RetailerList;
  segment?: Maybe<Segment>;
  segments: Array<Maybe<Segment>>;
  sku?: Maybe<Sku>;
  /** List of SKUs by search phrase */
  skus?: Maybe<SkuList>;
  user?: Maybe<User>;
  users?: Maybe<Array<Maybe<User>>>;
};


export type QueryAccountArgs = {
  accountId: Scalars['ID'];
};


export type QueryAccountsArgs = {
  retailerId?: InputMaybe<Scalars['ID']>;
  searchName?: InputMaybe<Scalars['String']>;
};


export type QueryAdvertiserArgs = {
  id: Scalars['ID'];
};


export type QueryAudienceArgs = {
  audienceId: Scalars['ID'];
};


export type QueryAudiencesArgs = {
  someArgument?: InputMaybe<Scalars['String']>;
};


export type QueryBrandArgs = {
  brandId: Scalars['ID'];
};


export type QueryBrandsArgs = {
  brandIds?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};


export type QueryCampaignArgs = {
  id: Scalars['ID'];
};


export type QueryCampaignsArgs = {
  accountId?: InputMaybe<Scalars['ID']>;
  brandId?: InputMaybe<Scalars['ID']>;
  page?: InputMaybe<Scalars['Int']>;
  retailerId?: InputMaybe<Scalars['ID']>;
  size?: InputMaybe<Scalars['Int']>;
};


export type QueryCountriesArgs = {
  countryCodes?: InputMaybe<Array<InputMaybe<CountryCode>>>;
  searchName?: InputMaybe<Scalars['String']>;
};


export type QueryCountryArgs = {
  code: CountryCode;
};


export type QueryCurrenciesArgs = {
  searchName?: InputMaybe<Scalars['String']>;
};


export type QueryCurrencyArgs = {
  code?: InputMaybe<CurrencyCode>;
  id?: InputMaybe<Scalars['ID']>;
};


export type QueryLineitemArgs = {
  id: Scalars['ID'];
};


export type QueryLineitemsArgs = {
  campaignId: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};


export type QueryRetailerArgs = {
  id: Scalars['ID'];
};


export type QueryRetailersArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  retailerIds?: InputMaybe<Array<Scalars['ID']>>;
};


export type QuerySegmentArgs = {
  segmentId: Scalars['ID'];
};


export type QuerySegmentsArgs = {
  someArgument?: InputMaybe<Scalars['String']>;
};


export type QuerySkuArgs = {
  skuKey: Scalars['ID'];
};


export type QuerySkusArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  search?: InputMaybe<Scalars['String']>;
};


export type QueryUserArgs = {
  userId: Scalars['ID'];
};


export type QueryUsersArgs = {
  searchCriteria?: InputMaybe<Scalars['String']>;
};

/** TODO: add description */
export type ReportingLabel = {
  __typename?: 'ReportingLabel';
  something?: Maybe<Scalars['String']>;
};

export type Retailer = {
  __typename?: 'Retailer';
  /** account related to the retailer */
  account?: Maybe<Account>;
  campaigns?: Maybe<CampaignList>;
  countriesOfOperation?: Maybe<Scalars['Int']>;
  countryOfOrigin?: Maybe<Scalars['String']>;
  expermentalConfig?: Maybe<Array<Maybe<RetailerExpermentalConfig>>>;
  id: Scalars['ID'];
  /** Lineitems for the retailer */
  lineitems?: Maybe<Array<Maybe<Lineitem>>>;
  name: Scalars['String'];
  operationalFormat?: Maybe<Scalars['String']>;
  parentCompanyNetIncome?: Maybe<Scalars['Int']>;
  parentRevenue?: Maybe<Scalars['Int']>;
  preferences?: Maybe<RetailerPreferences>;
  rank?: Maybe<Scalars['Int']>;
  retailRevenue?: Maybe<Scalars['Int']>;
  retailRevenueCagr?: Maybe<Scalars['Int']>;
  /** sellers related to the retailer */
  sellers?: Maybe<Array<Maybe<Seller>>>;
  status: RetailerStatus;
};

export type RetailerExpermentalConfig = {
  __typename?: 'RetailerExpermentalConfig';
  id: Scalars['ID'];
  key: Scalars['String'];
  retailer?: Maybe<Retailer>;
  value: Scalars['String'];
};

export type RetailerList = ListOffsetLimit & {
  __typename?: 'RetailerList';
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  retailers: Array<Maybe<Retailer>>;
  totalCount?: Maybe<Scalars['Int']>;
};

export type RetailerPreferenceDefaultValue = {
  __typename?: 'RetailerPreferenceDefaultValue';
  id: Scalars['ID'];
  key: Scalars['String'];
  retailerPreferences?: Maybe<RetailerPreferences>;
  value: Scalars['String'];
};

export type RetailerPreferences = {
  __typename?: 'RetailerPreferences';
  defaultValues?: Maybe<Array<Maybe<RetailerPreferenceDefaultValue>>>;
  id: Scalars['ID'];
  retailer?: Maybe<Retailer>;
};

export enum RetailerStatus {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Live = 'LIVE'
}

/** Stock Keeping Unit */
export type Sku = {
  __typename?: 'SKU';
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  matchingSearchPhrases?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Money']>;
  quantity?: Maybe<Scalars['Int']>;
  skuKey: Scalars['ID'];
};

export type SkuUpdate = {
  description?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<Scalars['String']>;
  matchingSearchPhrases?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  name?: InputMaybe<Scalars['String']>;
  price?: InputMaybe<Scalars['Money']>;
  quantity?: InputMaybe<Scalars['Int']>;
  skuKey: Scalars['ID'];
};

/** Account in SalesForce */
export type SalesForceAccount = {
  __typename?: 'SalesForceAccount';
  favoriteColor?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  shoeSize?: Maybe<Scalars['Float']>;
};

/** Audience Segment */
export type Segment = {
  __typename?: 'Segment';
  audiences: Array<Maybe<Audience>>;
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
};


/** Audience Segment */
export type SegmentAudiencesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

/**
 * Sellers are a concept on many retailer platforms where products are purchased through
 *  (and even sometimes fulfilled by) a separate business contracting with the retailer.
 *  Many sellers do this to try and gain representation on a platform with an existing shopper base,
 *  and retailers do this to gain a cut of the market the seller brings (while often defraying cost and risk associated with inventory).
 */
export type Seller = {
  __typename?: 'Seller';
  id: Scalars['ID'];
  /** The name of the seller; usually this represents a business and is intended to be displayable for people to easily digest. “Ben’s House of Vintage Shoes” is a good example. */
  name: Scalars['String'];
};

/** List of SKUs pagable by offset and limit */
export type SkuList = {
  __typename?: 'SkuList';
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  skus: Array<Maybe<Sku>>;
  totalCount?: Maybe<Scalars['Int']>;
};

export type StringAttribute = {
  __typename?: 'StringAttribute';
  key: Scalars['String'];
  value?: Maybe<Scalars['String']>;
};

export type Subscription = {
  __typename?: 'Subscription';
  accountBrandedKeywordsDisabled?: Maybe<Account>;
  accountBrandedKeywordsEnabled?: Maybe<Account>;
  accountBrandsUpated?: Maybe<Account>;
  accountCountryAdded?: Maybe<Account>;
  accountCreated?: Maybe<Account>;
  accountCurrencyDataChanged?: Maybe<Account>;
  accountFeesModified?: Maybe<Account>;
  accountInitialized?: Maybe<Account>;
  accountReportingLabelModified?: Maybe<Account>;
  accountRetailerConnected?: Maybe<Retailer>;
  accountRetailersUpdated?: Maybe<Array<Maybe<Retailer>>>;
  accountSalesforceDataModified?: Maybe<SalesForceAccount>;
  accountSellerModified?: Maybe<Account>;
  accountUserAdded?: Maybe<User>;
  accountUserRemoved?: Maybe<User>;
  accountUserUpdated?: Maybe<User>;
  accountWhileLabelSettingsCreated?: Maybe<AccountSettings>;
  accountWhileLabelSettingsUpdated?: Maybe<AccountSettings>;
  campaignCreated: Campaign;
  childAccountCreated?: Maybe<Account>;
  externalUserNameUpdated?: Maybe<Account>;
  externameUserNameUpdated?: Maybe<User>;
  lineitemActivated: Lineitem;
  lineitemCreated: Lineitem;
  lineitemPaused: Lineitem;
  portfolioBrandsModified?: Maybe<Portfolio>;
  portfolioCreated?: Maybe<Portfolio>;
  portfolioMappedToUser?: Maybe<Portfolio>;
  portfolioNameModified?: Maybe<Portfolio>;
  portfolioUserAdded?: Maybe<User>;
  portfolioUserRemovedFrom?: Maybe<User>;
  portfoliosRemoved?: Maybe<Portfolio>;
  privateMarketAccountCrated?: Maybe<PrivateMarketAccount>;
  retailerInitialized?: Maybe<Retailer>;
  retailerUpdated?: Maybe<Retailer>;
  retailerWentLive?: Maybe<Retailer>;
  skuInformationModified?: Maybe<Array<Maybe<Sku>>>;
  taxonomyManuallyAdded?: Maybe<Array<Maybe<Taxonomy>>>;
};


export type SubscriptionAccountBrandedKeywordsDisabledArgs = {
  accountId: Scalars['ID'];
};


export type SubscriptionAccountBrandedKeywordsEnabledArgs = {
  accountId: Scalars['ID'];
};


export type SubscriptionAccountBrandsUpatedArgs = {
  accountId: Scalars['ID'];
};


export type SubscriptionAccountCountryAddedArgs = {
  accountId: Scalars['ID'];
};


export type SubscriptionAccountCurrencyDataChangedArgs = {
  accountId: Scalars['ID'];
};


export type SubscriptionAccountFeesModifiedArgs = {
  accountId: Scalars['ID'];
};


export type SubscriptionAccountInitializedArgs = {
  accountId: Scalars['ID'];
};


export type SubscriptionAccountReportingLabelModifiedArgs = {
  accountId: Scalars['ID'];
};


export type SubscriptionAccountRetailerConnectedArgs = {
  accountId: Scalars['ID'];
};


export type SubscriptionAccountRetailersUpdatedArgs = {
  accountId: Scalars['ID'];
};


export type SubscriptionAccountSalesforceDataModifiedArgs = {
  accountId: Scalars['ID'];
};


export type SubscriptionAccountSellerModifiedArgs = {
  accountId: Scalars['ID'];
};


export type SubscriptionAccountWhileLabelSettingsCreatedArgs = {
  accountId: Scalars['ID'];
};


export type SubscriptionAccountWhileLabelSettingsUpdatedArgs = {
  accountId: Scalars['ID'];
};


export type SubscriptionLineitemActivatedArgs = {
  lineitemId: Scalars['ID'];
};


export type SubscriptionLineitemPausedArgs = {
  lineitemId: Scalars['ID'];
};

export type Taxonomy = {
  __typename?: 'Taxonomy';
  key?: Maybe<Scalars['ID']>;
  skus?: Maybe<SkuList>;
};


export type TaxonomySkusArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

export type UpdateAccountSettings = {
  things?: InputMaybe<Scalars['String']>;
};

export type UpdateWhiteLabelSettings = {
  things?: InputMaybe<Scalars['String']>;
};

export type User = {
  __typename?: 'User';
  backupCodeEnabled?: Maybe<Scalars['Boolean']>;
  banned?: Maybe<Scalars['Boolean']>;
  birthday?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  emailAddresses?: Maybe<Array<Maybe<EmailAddress>>>;
  externalAccounts?: Maybe<Array<Maybe<ExternalAccount>>>;
  externalId?: Maybe<Scalars['ID']>;
  firstName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  hasImage?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  imageUrl?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  lastSignInAt?: Maybe<Scalars['DateTime']>;
  passwordEnabled?: Maybe<Scalars['Boolean']>;
  phoneNumbers?: Maybe<Array<Maybe<PhoneNumber>>>;
  primaryEmailAddressId?: Maybe<Scalars['String']>;
  primaryPhoneNumberId?: Maybe<Scalars['String']>;
  primaryWeb3WalletId?: Maybe<Scalars['String']>;
  privateMetadata?: Maybe<Array<Maybe<Attribute>>>;
  publicMetadata?: Maybe<Array<Maybe<Attribute>>>;
  totpEnabled?: Maybe<Scalars['Boolean']>;
  twoFactorEnabled?: Maybe<Scalars['Boolean']>;
  unsafeMetadata?: Maybe<Array<Maybe<Attribute>>>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  web3Wallets?: Maybe<Array<Maybe<Web3Wallet>>>;
};

export type Verification = {
  __typename?: 'Verification';
  attempts?: Maybe<Scalars['Int']>;
  expireAt?: Maybe<Scalars['Int']>;
  externalVerificationRedirectURL?: Maybe<Scalars['URL']>;
  nonce?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  strategy?: Maybe<Scalars['String']>;
};

export type Web3Wallet = {
  __typename?: 'Web3Wallet';
  id?: Maybe<Scalars['ID']>;
  verification?: Maybe<Verification>;
  web3Wallet?: Maybe<Scalars['String']>;
};



export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | ResolverWithResolve<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping of union types */
export type ResolversUnionTypes = {
  Attribute: ( BooleanAttribute ) | ( DateTimeAttribute ) | ( NumberAttribute ) | ( StringAttribute );
};

/** Mapping of union parent types */
export type ResolversUnionParentTypes = {
  Attribute: ( BooleanAttribute ) | ( DateTimeAttribute ) | ( NumberAttribute ) | ( StringAttribute );
};

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  Account: ResolverTypeWrapper<AccountModel>;
  AccountFee: ResolverTypeWrapper<Omit<AccountFee, 'account'> & { account?: Maybe<ResolversTypes['Account']> }>;
  AccountSettings: ResolverTypeWrapper<AccountSettings>;
  AccountType: AccountType;
  AccountWhiteLabelSettings: ResolverTypeWrapper<AccountWhiteLabelSettings>;
  Advertiser: ResolverTypeWrapper<Omit<Advertiser, 'campaigns'> & { campaigns?: Maybe<ResolversTypes['CampaignList']> }>;
  AdvertiserList: ResolverTypeWrapper<Omit<AdvertiserList, 'advertisers'> & { advertisers?: Maybe<Array<Maybe<ResolversTypes['Advertiser']>>> }>;
  Attribute: ResolverTypeWrapper<ResolversUnionTypes['Attribute']>;
  Audience: ResolversTypes['OffsiteAudience'] | ResolversTypes['OnsiteAudience'];
  AudienceList: ResolverTypeWrapper<AudienceList>;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
  BooleanAttribute: ResolverTypeWrapper<BooleanAttribute>;
  Brand: ResolverTypeWrapper<BrandModel>;
  BrandList: ResolverTypeWrapper<Omit<BrandList, 'brands'> & { brands: Array<Maybe<ResolversTypes['Brand']>> }>;
  BudgetType: BudgetType;
  Campaign: ResolverTypeWrapper<CampaignModel>;
  CampaignBudget: ResolverTypeWrapper<CampaignBudget>;
  CampaignCapping: ResolverTypeWrapper<Omit<CampaignCapping, 'campaign'> & { campaign?: Maybe<ResolversTypes['Campaign']> }>;
  CampaignEligibility: CampaignEligibility;
  CampaignList: ResolverTypeWrapper<Omit<CampaignList, 'campaigns'> & { campaigns?: Maybe<Array<Maybe<ResolversTypes['Campaign']>>> }>;
  CampaignStatus: CampaignStatus;
  CampaignType: CampaignType;
  Country: ResolverTypeWrapper<CountryModel>;
  CountryCode: CountryCode;
  CountrySettings: ResolverTypeWrapper<CountrySettings>;
  Creative: ResolverTypeWrapper<Omit<Creative, 'campaign'> & { campaign?: Maybe<ResolversTypes['Campaign']> }>;
  Currency: ResolverTypeWrapper<CurrencyModel>;
  CurrencyCode: CurrencyCode;
  CurrencySettings: ResolverTypeWrapper<CurrencySettings>;
  DateTime: ResolverTypeWrapper<Scalars['DateTime']>;
  DateTimeAttribute: ResolverTypeWrapper<DateTimeAttribute>;
  EmailAddress: ResolverTypeWrapper<EmailAddress>;
  ExternalAccount: ResolverTypeWrapper<Omit<ExternalAccount, 'publicMetadata'> & { publicMetadata?: Maybe<Array<Maybe<ResolversTypes['Attribute']>>> }>;
  FinancialStatus: FinancialStatus;
  Float: ResolverTypeWrapper<Scalars['Float']>;
  ID: ResolverTypeWrapper<Scalars['ID']>;
  IdentificationLink: ResolverTypeWrapper<IdentificationLink>;
  Int: ResolverTypeWrapper<Scalars['Int']>;
  Lineitem: ResolverTypeWrapper<LineitemModel>;
  LineitemBudget: ResolverTypeWrapper<LineitemBudget>;
  LineitemList: ResolverTypeWrapper<Omit<LineitemList, 'lineitems'> & { lineitems?: Maybe<Array<Maybe<ResolversTypes['Lineitem']>>> }>;
  LineitemPage: ResolverTypeWrapper<LineitemPage>;
  LineitemStatus: LineitemStatus;
  ListCursor: never;
  ListOffsetLimit: ResolversTypes['LineitemList'] | ResolversTypes['RetailerList'];
  ListPage: ResolversTypes['CampaignList'];
  LookbackWindow: LookbackWindow;
  MatchLevel: MatchLevel;
  Money: ResolverTypeWrapper<Scalars['Money']>;
  Mutation: ResolverTypeWrapper<{}>;
  NewAccount: NewAccount;
  NewAccountFee: NewAccountFee;
  NewBrand: NewBrand;
  NewCampaign: NewCampaign;
  NewCampaignBudget: NewCampaignBudget;
  NewDefaultPreferences: NewDefaultPreferences;
  NewDefaultValue: NewDefaultValue;
  NewLineitem: NewLineitem;
  NewLineitemBudget: NewLineitemBudget;
  NewLineitemPage: NewLineitemPage;
  NewPortfolio: NewPortfolio;
  NewPrivateMarketAccount: NewPrivateMarketAccount;
  NewRetailer: NewRetailer;
  NewSalesForeAccount: NewSalesForeAccount;
  NewWhiteLabelSettings: NewWhiteLabelSettings;
  NumberAttribute: ResolverTypeWrapper<NumberAttribute>;
  OffsiteAudience: ResolverTypeWrapper<OffsiteAudience>;
  OnsiteAudience: ResolverTypeWrapper<OnsiteAudience>;
  PageEnvironment: PageEnvironment;
  PageType: PageType;
  PhoneNumber: ResolverTypeWrapper<PhoneNumber>;
  Portfolio: ResolverTypeWrapper<Omit<Portfolio, 'accounts'> & { accounts?: Maybe<Array<Maybe<ResolversTypes['Account']>>> }>;
  PrivateMarketAccount: ResolverTypeWrapper<PrivateMarketAccount>;
  Query: ResolverTypeWrapper<{}>;
  ReportingLabel: ResolverTypeWrapper<ReportingLabel>;
  Retailer: ResolverTypeWrapper<RetailerModel>;
  RetailerExpermentalConfig: ResolverTypeWrapper<Omit<RetailerExpermentalConfig, 'retailer'> & { retailer?: Maybe<ResolversTypes['Retailer']> }>;
  RetailerList: ResolverTypeWrapper<Omit<RetailerList, 'retailers'> & { retailers: Array<Maybe<ResolversTypes['Retailer']>> }>;
  RetailerPreferenceDefaultValue: ResolverTypeWrapper<Omit<RetailerPreferenceDefaultValue, 'retailerPreferences'> & { retailerPreferences?: Maybe<ResolversTypes['RetailerPreferences']> }>;
  RetailerPreferences: ResolverTypeWrapper<Omit<RetailerPreferences, 'defaultValues' | 'retailer'> & { defaultValues?: Maybe<Array<Maybe<ResolversTypes['RetailerPreferenceDefaultValue']>>>, retailer?: Maybe<ResolversTypes['Retailer']> }>;
  RetailerStatus: RetailerStatus;
  SKU: ResolverTypeWrapper<SKUModel>;
  SKUUpdate: SkuUpdate;
  SalesForceAccount: ResolverTypeWrapper<SalesForceAccount>;
  Segment: ResolverTypeWrapper<Segment>;
  Seller: ResolverTypeWrapper<Seller>;
  SkuList: ResolverTypeWrapper<Omit<SkuList, 'skus'> & { skus: Array<Maybe<ResolversTypes['SKU']>> }>;
  String: ResolverTypeWrapper<Scalars['String']>;
  StringAttribute: ResolverTypeWrapper<StringAttribute>;
  Subscription: ResolverTypeWrapper<{}>;
  Taxonomy: ResolverTypeWrapper<Omit<Taxonomy, 'skus'> & { skus?: Maybe<ResolversTypes['SkuList']> }>;
  URL: ResolverTypeWrapper<Scalars['URL']>;
  UpdateAccountSettings: UpdateAccountSettings;
  UpdateWhiteLabelSettings: UpdateWhiteLabelSettings;
  User: ResolverTypeWrapper<Omit<User, 'privateMetadata' | 'publicMetadata' | 'unsafeMetadata'> & { privateMetadata?: Maybe<Array<Maybe<ResolversTypes['Attribute']>>>, publicMetadata?: Maybe<Array<Maybe<ResolversTypes['Attribute']>>>, unsafeMetadata?: Maybe<Array<Maybe<ResolversTypes['Attribute']>>> }>;
  Verification: ResolverTypeWrapper<Verification>;
  Web3Wallet: ResolverTypeWrapper<Web3Wallet>;
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  Account: AccountModel;
  AccountFee: Omit<AccountFee, 'account'> & { account?: Maybe<ResolversParentTypes['Account']> };
  AccountSettings: AccountSettings;
  AccountWhiteLabelSettings: AccountWhiteLabelSettings;
  Advertiser: Omit<Advertiser, 'campaigns'> & { campaigns?: Maybe<ResolversParentTypes['CampaignList']> };
  AdvertiserList: Omit<AdvertiserList, 'advertisers'> & { advertisers?: Maybe<Array<Maybe<ResolversParentTypes['Advertiser']>>> };
  Attribute: ResolversUnionParentTypes['Attribute'];
  Audience: ResolversParentTypes['OffsiteAudience'] | ResolversParentTypes['OnsiteAudience'];
  AudienceList: AudienceList;
  Boolean: Scalars['Boolean'];
  BooleanAttribute: BooleanAttribute;
  Brand: BrandModel;
  BrandList: Omit<BrandList, 'brands'> & { brands: Array<Maybe<ResolversParentTypes['Brand']>> };
  Campaign: CampaignModel;
  CampaignBudget: CampaignBudget;
  CampaignCapping: Omit<CampaignCapping, 'campaign'> & { campaign?: Maybe<ResolversParentTypes['Campaign']> };
  CampaignList: Omit<CampaignList, 'campaigns'> & { campaigns?: Maybe<Array<Maybe<ResolversParentTypes['Campaign']>>> };
  Country: CountryModel;
  CountrySettings: CountrySettings;
  Creative: Omit<Creative, 'campaign'> & { campaign?: Maybe<ResolversParentTypes['Campaign']> };
  Currency: CurrencyModel;
  CurrencySettings: CurrencySettings;
  DateTime: Scalars['DateTime'];
  DateTimeAttribute: DateTimeAttribute;
  EmailAddress: EmailAddress;
  ExternalAccount: Omit<ExternalAccount, 'publicMetadata'> & { publicMetadata?: Maybe<Array<Maybe<ResolversParentTypes['Attribute']>>> };
  Float: Scalars['Float'];
  ID: Scalars['ID'];
  IdentificationLink: IdentificationLink;
  Int: Scalars['Int'];
  Lineitem: LineitemModel;
  LineitemBudget: LineitemBudget;
  LineitemList: Omit<LineitemList, 'lineitems'> & { lineitems?: Maybe<Array<Maybe<ResolversParentTypes['Lineitem']>>> };
  LineitemPage: LineitemPage;
  ListCursor: never;
  ListOffsetLimit: ResolversParentTypes['LineitemList'] | ResolversParentTypes['RetailerList'];
  ListPage: ResolversParentTypes['CampaignList'];
  Money: Scalars['Money'];
  Mutation: {};
  NewAccount: NewAccount;
  NewAccountFee: NewAccountFee;
  NewBrand: NewBrand;
  NewCampaign: NewCampaign;
  NewCampaignBudget: NewCampaignBudget;
  NewDefaultPreferences: NewDefaultPreferences;
  NewDefaultValue: NewDefaultValue;
  NewLineitem: NewLineitem;
  NewLineitemBudget: NewLineitemBudget;
  NewLineitemPage: NewLineitemPage;
  NewPortfolio: NewPortfolio;
  NewPrivateMarketAccount: NewPrivateMarketAccount;
  NewRetailer: NewRetailer;
  NewSalesForeAccount: NewSalesForeAccount;
  NewWhiteLabelSettings: NewWhiteLabelSettings;
  NumberAttribute: NumberAttribute;
  OffsiteAudience: OffsiteAudience;
  OnsiteAudience: OnsiteAudience;
  PhoneNumber: PhoneNumber;
  Portfolio: Omit<Portfolio, 'accounts'> & { accounts?: Maybe<Array<Maybe<ResolversParentTypes['Account']>>> };
  PrivateMarketAccount: PrivateMarketAccount;
  Query: {};
  ReportingLabel: ReportingLabel;
  Retailer: RetailerModel;
  RetailerExpermentalConfig: Omit<RetailerExpermentalConfig, 'retailer'> & { retailer?: Maybe<ResolversParentTypes['Retailer']> };
  RetailerList: Omit<RetailerList, 'retailers'> & { retailers: Array<Maybe<ResolversParentTypes['Retailer']>> };
  RetailerPreferenceDefaultValue: Omit<RetailerPreferenceDefaultValue, 'retailerPreferences'> & { retailerPreferences?: Maybe<ResolversParentTypes['RetailerPreferences']> };
  RetailerPreferences: Omit<RetailerPreferences, 'defaultValues' | 'retailer'> & { defaultValues?: Maybe<Array<Maybe<ResolversParentTypes['RetailerPreferenceDefaultValue']>>>, retailer?: Maybe<ResolversParentTypes['Retailer']> };
  SKU: SKUModel;
  SKUUpdate: SkuUpdate;
  SalesForceAccount: SalesForceAccount;
  Segment: Segment;
  Seller: Seller;
  SkuList: Omit<SkuList, 'skus'> & { skus: Array<Maybe<ResolversParentTypes['SKU']>> };
  String: Scalars['String'];
  StringAttribute: StringAttribute;
  Subscription: {};
  Taxonomy: Omit<Taxonomy, 'skus'> & { skus?: Maybe<ResolversParentTypes['SkuList']> };
  URL: Scalars['URL'];
  UpdateAccountSettings: UpdateAccountSettings;
  UpdateWhiteLabelSettings: UpdateWhiteLabelSettings;
  User: Omit<User, 'privateMetadata' | 'publicMetadata' | 'unsafeMetadata'> & { privateMetadata?: Maybe<Array<Maybe<ResolversParentTypes['Attribute']>>>, publicMetadata?: Maybe<Array<Maybe<ResolversParentTypes['Attribute']>>>, unsafeMetadata?: Maybe<Array<Maybe<ResolversParentTypes['Attribute']>>> };
  Verification: Verification;
  Web3Wallet: Web3Wallet;
};

export type AccountResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['Account']> = {
  accountExternalId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  allowBrandedKeywords?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  brands?: Resolver<Maybe<ResolversTypes['BrandList']>, ParentType, ContextType>;
  campaigns?: Resolver<Maybe<ResolversTypes['CampaignList']>, ParentType, ContextType>;
  countries?: Resolver<Maybe<Array<Maybe<ResolversTypes['Country']>>>, ParentType, ContextType>;
  currency?: Resolver<Maybe<ResolversTypes['Currency']>, ParentType, ContextType>;
  fee?: Resolver<Maybe<ResolversTypes['AccountFee']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  parentAccount?: Resolver<Maybe<ResolversTypes['Account']>, ParentType, ContextType>;
  parentAccountLabel?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  retailers?: Resolver<Maybe<Array<Maybe<ResolversTypes['Retailer']>>>, ParentType, ContextType, RequireFields<AccountRetailersArgs, 'limit' | 'offset'>>;
  salesForceAccount?: Resolver<Maybe<ResolversTypes['SalesForceAccount']>, ParentType, ContextType>;
  sellers?: Resolver<Maybe<Array<Maybe<ResolversTypes['Seller']>>>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['AccountType']>, ParentType, ContextType>;
  users?: Resolver<Maybe<Array<Maybe<ResolversTypes['User']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AccountFeeResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['AccountFee']> = {
  account?: Resolver<Maybe<ResolversTypes['Account']>, ParentType, ContextType>;
  accountServicingFee?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  demandSideFee?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  endDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  expiryDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  isCommerceDisplayManagedServiceFee?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isSponsoredProductsManagedServiceFee?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  startDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  supplySideFee?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AccountSettingsResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['AccountSettings']> = {
  something?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AccountWhiteLabelSettingsResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['AccountWhiteLabelSettings']> = {
  secondThing?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  thing?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AdvertiserResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['Advertiser']> = {
  campaigns?: Resolver<Maybe<ResolversTypes['CampaignList']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AdvertiserListResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['AdvertiserList']> = {
  advertisers?: Resolver<Maybe<Array<Maybe<ResolversTypes['Advertiser']>>>, ParentType, ContextType>;
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  hasMore?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  limit?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  offset?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AttributeResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['Attribute']> = {
  __resolveType: TypeResolveFn<'BooleanAttribute' | 'DateTimeAttribute' | 'NumberAttribute' | 'StringAttribute', ParentType, ContextType>;
};

export type AudienceResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['Audience']> = {
  __resolveType: TypeResolveFn<'OffsiteAudience' | 'OnsiteAudience', ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  segments?: Resolver<Array<Maybe<ResolversTypes['Segment']>>, ParentType, ContextType, RequireFields<AudienceSegmentsArgs, 'limit' | 'offset'>>;
};

export type AudienceListResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['AudienceList']> = {
  audiences?: Resolver<Array<Maybe<ResolversTypes['Audience']>>, ParentType, ContextType>;
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  hasMore?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  limit?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  offset?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BooleanAttributeResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['BooleanAttribute']> = {
  key?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BrandResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['Brand']> = {
  brandValue?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  campaigns?: Resolver<Maybe<ResolversTypes['CampaignList']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  foundedBy?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  foundedIn?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  industry?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  keyPeople?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lineItems?: Resolver<Maybe<Array<Maybe<ResolversTypes['Lineitem']>>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  rank?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  rating?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  website?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BrandListResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['BrandList']> = {
  brands?: Resolver<Array<Maybe<ResolversTypes['Brand']>>, ParentType, ContextType>;
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  hasMore?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  limit?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  offset?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CampaignResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['Campaign']> = {
  account?: Resolver<Maybe<ResolversTypes['Account']>, ParentType, ContextType>;
  advertise?: Resolver<Maybe<ResolversTypes['Advertiser']>, ParentType, ContextType>;
  advertiser?: Resolver<Maybe<ResolversTypes['Advertiser']>, ParentType, ContextType>;
  brands?: Resolver<Maybe<Array<ResolversTypes['Brand']>>, ParentType, ContextType>;
  budget?: Resolver<Maybe<ResolversTypes['CampaignBudget']>, ParentType, ContextType>;
  eligibility?: Resolver<Maybe<ResolversTypes['CampaignEligibility']>, ParentType, ContextType>;
  endDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  externalAccountId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  externalCampaignId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isLockout?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  lineitems?: Resolver<Maybe<ResolversTypes['LineitemList']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  retailerIds?: Resolver<Maybe<Array<ResolversTypes['ID']>>, ParentType, ContextType>;
  retailers?: Resolver<Maybe<Array<ResolversTypes['Retailer']>>, ParentType, ContextType>;
  startDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['CampaignStatus']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['CampaignType']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CampaignBudgetResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['CampaignBudget']> = {
  amount?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  cappedBudgetAmount?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  dailyPacing?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  isCapped?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  monthlyPacing?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['BudgetType']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CampaignCappingResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['CampaignCapping']> = {
  campaign?: Resolver<Maybe<ResolversTypes['Campaign']>, ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  duration?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CampaignListResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['CampaignList']> = {
  campaigns?: Resolver<Maybe<Array<Maybe<ResolversTypes['Campaign']>>>, ParentType, ContextType>;
  page?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CountryResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['Country']> = {
  code?: Resolver<ResolversTypes['CountryCode'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['CurrencyCode'], ParentType, ContextType>;
  isActiveForAccount?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CountrySettingsResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['CountrySettings']> = {
  secondThing?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  thing?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreativeResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['Creative']> = {
  campaign?: Resolver<Maybe<ResolversTypes['Campaign']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CurrencyResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['Currency']> = {
  code?: Resolver<ResolversTypes['CurrencyCode'], ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  symbol?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CurrencySettingsResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['CurrencySettings']> = {
  something?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface DateTimeScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['DateTime'], any> {
  name: 'DateTime';
}

export type DateTimeAttributeResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['DateTimeAttribute']> = {
  key?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type EmailAddressResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['EmailAddress']> = {
  emailAddress?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  linkedTo?: Resolver<Maybe<Array<Maybe<ResolversTypes['IdentificationLink']>>>, ParentType, ContextType>;
  verification?: Resolver<Maybe<ResolversTypes['Verification']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ExternalAccountResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['ExternalAccount']> = {
  approvedScopes?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  emailAddress?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  externalId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  identificationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  imageUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  provider?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  publicMetadata?: Resolver<Maybe<Array<Maybe<ResolversTypes['Attribute']>>>, ParentType, ContextType>;
  username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  verification?: Resolver<Maybe<ResolversTypes['Verification']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IdentificationLinkResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['IdentificationLink']> = {
  id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LineitemResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['Lineitem']> = {
  audience?: Resolver<Maybe<ResolversTypes['Audience']>, ParentType, ContextType>;
  budget?: Resolver<Maybe<ResolversTypes['LineitemBudget']>, ParentType, ContextType>;
  campaign?: Resolver<Maybe<ResolversTypes['Campaign']>, ParentType, ContextType>;
  creatives?: Resolver<Maybe<Array<Maybe<ResolversTypes['Creative']>>>, ParentType, ContextType>;
  endDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  financialStatus?: Resolver<Maybe<ResolversTypes['FinancialStatus']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  pages?: Resolver<Maybe<Array<Maybe<ResolversTypes['LineitemPage']>>>, ParentType, ContextType>;
  retailer?: Resolver<Maybe<ResolversTypes['Retailer']>, ParentType, ContextType>;
  startDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['LineitemStatus']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LineitemBudgetResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['LineitemBudget']> = {
  amount?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  isCapped?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['BudgetType']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LineitemListResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['LineitemList']> = {
  limit?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  lineitems?: Resolver<Maybe<Array<Maybe<ResolversTypes['Lineitem']>>>, ParentType, ContextType>;
  offset?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LineitemPageResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['LineitemPage']> = {
  environment?: Resolver<Maybe<ResolversTypes['PageEnvironment']>, ParentType, ContextType>;
  includeSubchildren?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isExclusion?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  taxonomy?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['PageType']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ListCursorResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['ListCursor']> = {
  __resolveType: TypeResolveFn<null, ParentType, ContextType>;
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  limit?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
};

export type ListOffsetLimitResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['ListOffsetLimit']> = {
  __resolveType: TypeResolveFn<'LineitemList' | 'RetailerList', ParentType, ContextType>;
  limit?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  offset?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
};

export type ListPageResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['ListPage']> = {
  __resolveType: TypeResolveFn<'CampaignList', ParentType, ContextType>;
  page?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
};

export interface MoneyScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Money'], any> {
  name: 'Money';
}

export type MutationResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['Mutation']> = {
  activateLineitems?: Resolver<Array<Maybe<ResolversTypes['Lineitem']>>, ParentType, ContextType, RequireFields<MutationActivateLineitemsArgs, 'lineitemIds'>>;
  activateRetailer?: Resolver<Maybe<ResolversTypes['Retailer']>, ParentType, ContextType, RequireFields<MutationActivateRetailerArgs, 'id'>>;
  addAccountSeller?: Resolver<Maybe<ResolversTypes['Seller']>, ParentType, ContextType, RequireFields<MutationAddAccountSellerArgs, 'accountId' | 'sellerId'>>;
  addDemandAccountBrands?: Resolver<Maybe<Array<Maybe<ResolversTypes['Brand']>>>, ParentType, ContextType, RequireFields<MutationAddDemandAccountBrandsArgs, 'accountId' | 'brandIds'>>;
  addRemoveBrandsToPortfolio?: Resolver<Maybe<ResolversTypes['Portfolio']>, ParentType, ContextType, RequireFields<MutationAddRemoveBrandsToPortfolioArgs, 'brandIds' | 'portfolioId'>>;
  addTaxonomyManually?: Resolver<Maybe<ResolversTypes['SKU']>, ParentType, ContextType, RequireFields<MutationAddTaxonomyManuallyArgs, 'skyKey' | 'taxonomy'>>;
  addUser?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<MutationAddUserArgs, 'accountId' | 'userId'>>;
  applyAccountFees?: Resolver<Maybe<ResolversTypes['AccountFee']>, ParentType, ContextType, RequireFields<MutationApplyAccountFeesArgs, 'accountId' | 'fees'>>;
  archiveLineitems?: Resolver<Array<Maybe<ResolversTypes['Lineitem']>>, ParentType, ContextType, RequireFields<MutationArchiveLineitemsArgs, 'lineitemIds'>>;
  configureTOP?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  connectAccountToRetailer?: Resolver<Maybe<ResolversTypes['Account']>, ParentType, ContextType, RequireFields<MutationConnectAccountToRetailerArgs, 'accountId' | 'retailerId'>>;
  deactivateRetailer?: Resolver<Maybe<ResolversTypes['Retailer']>, ParentType, ContextType, RequireFields<MutationDeactivateRetailerArgs, 'id'>>;
  enableBrandedKeywords?: Resolver<Maybe<ResolversTypes['Account']>, ParentType, ContextType, RequireFields<MutationEnableBrandedKeywordsArgs, 'accountId'>>;
  grantBrandAccessForUser?: Resolver<Maybe<ResolversTypes['Portfolio']>, ParentType, ContextType, RequireFields<MutationGrantBrandAccessForUserArgs, 'brandId' | 'portfolioId' | 'userId'>>;
  mapAccountRetailers?: Resolver<Maybe<Array<Maybe<ResolversTypes['Retailer']>>>, ParentType, ContextType, RequireFields<MutationMapAccountRetailersArgs, 'accountId' | 'retailerIds'>>;
  modifyAccoutSettings?: Resolver<Maybe<ResolversTypes['AccountSettings']>, ParentType, ContextType, RequireFields<MutationModifyAccoutSettingsArgs, 'accountId' | 'settings'>>;
  modifyCountrySettings?: Resolver<Maybe<ResolversTypes['CountrySettings']>, ParentType, ContextType, RequireFields<MutationModifyCountrySettingsArgs, 'accountId'>>;
  modifyCurrencySettings?: Resolver<Maybe<ResolversTypes['CurrencySettings']>, ParentType, ContextType, RequireFields<MutationModifyCurrencySettingsArgs, 'accountId' | 'currency'>>;
  modifyPortfolioName?: Resolver<Maybe<ResolversTypes['Portfolio']>, ParentType, ContextType, RequireFields<MutationModifyPortfolioNameArgs, 'name' | 'portfolioId'>>;
  modifyReportingLabel?: Resolver<Maybe<ResolversTypes['ReportingLabel']>, ParentType, ContextType, RequireFields<MutationModifyReportingLabelArgs, 'accountId' | 'label'>>;
  newAccount?: Resolver<Maybe<ResolversTypes['Account']>, ParentType, ContextType, RequireFields<MutationNewAccountArgs, 'account'>>;
  newBrand?: Resolver<Maybe<ResolversTypes['Brand']>, ParentType, ContextType, RequireFields<MutationNewBrandArgs, 'brand'>>;
  newCampaign?: Resolver<Maybe<ResolversTypes['Campaign']>, ParentType, ContextType, RequireFields<MutationNewCampaignArgs, 'advertiserId' | 'campaign'>>;
  newLineitem?: Resolver<Maybe<ResolversTypes['Lineitem']>, ParentType, ContextType, RequireFields<MutationNewLineitemArgs, 'campaignId' | 'lineitem'>>;
  newPortfolio?: Resolver<Maybe<ResolversTypes['Portfolio']>, ParentType, ContextType, RequireFields<MutationNewPortfolioArgs, 'portfolio'>>;
  newPrivateMarketAccount?: Resolver<Maybe<ResolversTypes['PrivateMarketAccount']>, ParentType, ContextType, RequireFields<MutationNewPrivateMarketAccountArgs, 'accountId' | 'privateMarketAccount'>>;
  newRetailer?: Resolver<Maybe<ResolversTypes['Retailer']>, ParentType, ContextType, RequireFields<MutationNewRetailerArgs, 'retailer'>>;
  pauseLineitems?: Resolver<Array<Maybe<ResolversTypes['Lineitem']>>, ParentType, ContextType, RequireFields<MutationPauseLineitemsArgs, 'lineitemIds'>>;
  removeAccountRetailer?: Resolver<Maybe<ResolversTypes['Retailer']>, ParentType, ContextType, RequireFields<MutationRemoveAccountRetailerArgs, 'accountId' | 'retailerId'>>;
  removeAccountSeller?: Resolver<Maybe<ResolversTypes['Seller']>, ParentType, ContextType, RequireFields<MutationRemoveAccountSellerArgs, 'accountId' | 'sellerId'>>;
  removeAccountUser?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<MutationRemoveAccountUserArgs, 'accountId' | 'userId'>>;
  removeBrandAccessForUser?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<MutationRemoveBrandAccessForUserArgs, 'brandId' | 'userId'>>;
  removeDemandAccountBrands?: Resolver<Maybe<Array<Maybe<ResolversTypes['Brand']>>>, ParentType, ContextType, RequireFields<MutationRemoveDemandAccountBrandsArgs, 'accountId' | 'brandIds'>>;
  removePortfolio?: Resolver<Maybe<ResolversTypes['Portfolio']>, ParentType, ContextType, RequireFields<MutationRemovePortfolioArgs, 'portfolioId'>>;
  removePortfolioFromAccount?: Resolver<Maybe<ResolversTypes['Portfolio']>, ParentType, ContextType, RequireFields<MutationRemovePortfolioFromAccountArgs, 'accountId' | 'portfolioId'>>;
  setRetailerPreferencesDefaultValues?: Resolver<Maybe<ResolversTypes['RetailerPreferences']>, ParentType, ContextType, RequireFields<MutationSetRetailerPreferencesDefaultValuesArgs, 'preferences'>>;
  setupWhiteLabelSettings?: Resolver<Maybe<ResolversTypes['AccountWhiteLabelSettings']>, ParentType, ContextType, RequireFields<MutationSetupWhiteLabelSettingsArgs, 'accountId' | 'whiteLabelSettings'>>;
  updateSKUs?: Resolver<Maybe<Array<Maybe<ResolversTypes['SKU']>>>, ParentType, ContextType, Partial<MutationUpdateSkUsArgs>>;
  updateUser?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  updateUserName?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<MutationUpdateUserNameArgs, 'accountId' | 'name' | 'userId'>>;
  updateWhiteLabelSettings?: Resolver<Maybe<ResolversTypes['AccountWhiteLabelSettings']>, ParentType, ContextType, RequireFields<MutationUpdateWhiteLabelSettingsArgs, 'accountId' | 'whiteLabelSettings'>>;
};

export type NumberAttributeResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['NumberAttribute']> = {
  key?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OffsiteAudienceResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['OffsiteAudience']> = {
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  segments?: Resolver<Array<Maybe<ResolversTypes['Segment']>>, ParentType, ContextType, RequireFields<OffsiteAudienceSegmentsArgs, 'limit' | 'offset'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OnsiteAudienceResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['OnsiteAudience']> = {
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  segments?: Resolver<Array<Maybe<ResolversTypes['Segment']>>, ParentType, ContextType, RequireFields<OnsiteAudienceSegmentsArgs, 'limit' | 'offset'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PhoneNumberResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['PhoneNumber']> = {
  defaultSecondFactor?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  linkedTo?: Resolver<Maybe<Array<Maybe<ResolversTypes['IdentificationLink']>>>, ParentType, ContextType>;
  phoneNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  reservedForSecondFactor?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  verification?: Resolver<Maybe<ResolversTypes['Verification']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PortfolioResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['Portfolio']> = {
  accounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Account']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PrivateMarketAccountResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['PrivateMarketAccount']> = {
  favoriteColor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  shoeSize?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type QueryResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['Query']> = {
  account?: Resolver<Maybe<ResolversTypes['Account']>, ParentType, ContextType, RequireFields<QueryAccountArgs, 'accountId'>>;
  accounts?: Resolver<Array<Maybe<ResolversTypes['Account']>>, ParentType, ContextType, Partial<QueryAccountsArgs>>;
  advertiser?: Resolver<Maybe<ResolversTypes['Advertiser']>, ParentType, ContextType, RequireFields<QueryAdvertiserArgs, 'id'>>;
  audience?: Resolver<Maybe<ResolversTypes['Audience']>, ParentType, ContextType, RequireFields<QueryAudienceArgs, 'audienceId'>>;
  audiences?: Resolver<ResolversTypes['AudienceList'], ParentType, ContextType, Partial<QueryAudiencesArgs>>;
  brand?: Resolver<Maybe<ResolversTypes['Brand']>, ParentType, ContextType, RequireFields<QueryBrandArgs, 'brandId'>>;
  brands?: Resolver<Maybe<ResolversTypes['BrandList']>, ParentType, ContextType, RequireFields<QueryBrandsArgs, 'limit' | 'offset'>>;
  campaign?: Resolver<Maybe<ResolversTypes['Campaign']>, ParentType, ContextType, RequireFields<QueryCampaignArgs, 'id'>>;
  campaigns?: Resolver<Maybe<ResolversTypes['CampaignList']>, ParentType, ContextType, RequireFields<QueryCampaignsArgs, 'page' | 'size'>>;
  countries?: Resolver<Array<Maybe<ResolversTypes['Country']>>, ParentType, ContextType, Partial<QueryCountriesArgs>>;
  country?: Resolver<Maybe<ResolversTypes['Country']>, ParentType, ContextType, RequireFields<QueryCountryArgs, 'code'>>;
  currencies?: Resolver<Array<Maybe<ResolversTypes['Currency']>>, ParentType, ContextType, Partial<QueryCurrenciesArgs>>;
  currency?: Resolver<Maybe<ResolversTypes['Currency']>, ParentType, ContextType, Partial<QueryCurrencyArgs>>;
  lineitem?: Resolver<Maybe<ResolversTypes['Lineitem']>, ParentType, ContextType, RequireFields<QueryLineitemArgs, 'id'>>;
  lineitems?: Resolver<Maybe<ResolversTypes['LineitemList']>, ParentType, ContextType, RequireFields<QueryLineitemsArgs, 'campaignId' | 'limit' | 'offset'>>;
  me?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  retailer?: Resolver<Maybe<ResolversTypes['Retailer']>, ParentType, ContextType, RequireFields<QueryRetailerArgs, 'id'>>;
  retailers?: Resolver<ResolversTypes['RetailerList'], ParentType, ContextType, RequireFields<QueryRetailersArgs, 'limit' | 'offset'>>;
  segment?: Resolver<Maybe<ResolversTypes['Segment']>, ParentType, ContextType, RequireFields<QuerySegmentArgs, 'segmentId'>>;
  segments?: Resolver<Array<Maybe<ResolversTypes['Segment']>>, ParentType, ContextType, Partial<QuerySegmentsArgs>>;
  sku?: Resolver<Maybe<ResolversTypes['SKU']>, ParentType, ContextType, RequireFields<QuerySkuArgs, 'skuKey'>>;
  skus?: Resolver<Maybe<ResolversTypes['SkuList']>, ParentType, ContextType, RequireFields<QuerySkusArgs, 'limit' | 'offset'>>;
  user?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<QueryUserArgs, 'userId'>>;
  users?: Resolver<Maybe<Array<Maybe<ResolversTypes['User']>>>, ParentType, ContextType, Partial<QueryUsersArgs>>;
};

export type ReportingLabelResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['ReportingLabel']> = {
  something?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RetailerResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['Retailer']> = {
  account?: Resolver<Maybe<ResolversTypes['Account']>, ParentType, ContextType>;
  campaigns?: Resolver<Maybe<ResolversTypes['CampaignList']>, ParentType, ContextType>;
  countriesOfOperation?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  countryOfOrigin?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  expermentalConfig?: Resolver<Maybe<Array<Maybe<ResolversTypes['RetailerExpermentalConfig']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  lineitems?: Resolver<Maybe<Array<Maybe<ResolversTypes['Lineitem']>>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  operationalFormat?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  parentCompanyNetIncome?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  parentRevenue?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  preferences?: Resolver<Maybe<ResolversTypes['RetailerPreferences']>, ParentType, ContextType>;
  rank?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  retailRevenue?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  retailRevenueCagr?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  sellers?: Resolver<Maybe<Array<Maybe<ResolversTypes['Seller']>>>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['RetailerStatus'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RetailerExpermentalConfigResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['RetailerExpermentalConfig']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  key?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  retailer?: Resolver<Maybe<ResolversTypes['Retailer']>, ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RetailerListResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['RetailerList']> = {
  limit?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  offset?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  retailers?: Resolver<Array<Maybe<ResolversTypes['Retailer']>>, ParentType, ContextType>;
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RetailerPreferenceDefaultValueResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['RetailerPreferenceDefaultValue']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  key?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  retailerPreferences?: Resolver<Maybe<ResolversTypes['RetailerPreferences']>, ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RetailerPreferencesResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['RetailerPreferences']> = {
  defaultValues?: Resolver<Maybe<Array<Maybe<ResolversTypes['RetailerPreferenceDefaultValue']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  retailer?: Resolver<Maybe<ResolversTypes['Retailer']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SkuResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['SKU']> = {
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  matchingSearchPhrases?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  quantity?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  skuKey?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SalesForceAccountResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['SalesForceAccount']> = {
  favoriteColor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  shoeSize?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SegmentResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['Segment']> = {
  audiences?: Resolver<Array<Maybe<ResolversTypes['Audience']>>, ParentType, ContextType, RequireFields<SegmentAudiencesArgs, 'limit' | 'offset'>>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SellerResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['Seller']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SkuListResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['SkuList']> = {
  limit?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  offset?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  skus?: Resolver<Array<Maybe<ResolversTypes['SKU']>>, ParentType, ContextType>;
  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type StringAttributeResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['StringAttribute']> = {
  key?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SubscriptionResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['Subscription']> = {
  accountBrandedKeywordsDisabled?: SubscriptionResolver<Maybe<ResolversTypes['Account']>, "accountBrandedKeywordsDisabled", ParentType, ContextType, RequireFields<SubscriptionAccountBrandedKeywordsDisabledArgs, 'accountId'>>;
  accountBrandedKeywordsEnabled?: SubscriptionResolver<Maybe<ResolversTypes['Account']>, "accountBrandedKeywordsEnabled", ParentType, ContextType, RequireFields<SubscriptionAccountBrandedKeywordsEnabledArgs, 'accountId'>>;
  accountBrandsUpated?: SubscriptionResolver<Maybe<ResolversTypes['Account']>, "accountBrandsUpated", ParentType, ContextType, RequireFields<SubscriptionAccountBrandsUpatedArgs, 'accountId'>>;
  accountCountryAdded?: SubscriptionResolver<Maybe<ResolversTypes['Account']>, "accountCountryAdded", ParentType, ContextType, RequireFields<SubscriptionAccountCountryAddedArgs, 'accountId'>>;
  accountCreated?: SubscriptionResolver<Maybe<ResolversTypes['Account']>, "accountCreated", ParentType, ContextType>;
  accountCurrencyDataChanged?: SubscriptionResolver<Maybe<ResolversTypes['Account']>, "accountCurrencyDataChanged", ParentType, ContextType, RequireFields<SubscriptionAccountCurrencyDataChangedArgs, 'accountId'>>;
  accountFeesModified?: SubscriptionResolver<Maybe<ResolversTypes['Account']>, "accountFeesModified", ParentType, ContextType, RequireFields<SubscriptionAccountFeesModifiedArgs, 'accountId'>>;
  accountInitialized?: SubscriptionResolver<Maybe<ResolversTypes['Account']>, "accountInitialized", ParentType, ContextType, RequireFields<SubscriptionAccountInitializedArgs, 'accountId'>>;
  accountReportingLabelModified?: SubscriptionResolver<Maybe<ResolversTypes['Account']>, "accountReportingLabelModified", ParentType, ContextType, RequireFields<SubscriptionAccountReportingLabelModifiedArgs, 'accountId'>>;
  accountRetailerConnected?: SubscriptionResolver<Maybe<ResolversTypes['Retailer']>, "accountRetailerConnected", ParentType, ContextType, RequireFields<SubscriptionAccountRetailerConnectedArgs, 'accountId'>>;
  accountRetailersUpdated?: SubscriptionResolver<Maybe<Array<Maybe<ResolversTypes['Retailer']>>>, "accountRetailersUpdated", ParentType, ContextType, RequireFields<SubscriptionAccountRetailersUpdatedArgs, 'accountId'>>;
  accountSalesforceDataModified?: SubscriptionResolver<Maybe<ResolversTypes['SalesForceAccount']>, "accountSalesforceDataModified", ParentType, ContextType, RequireFields<SubscriptionAccountSalesforceDataModifiedArgs, 'accountId'>>;
  accountSellerModified?: SubscriptionResolver<Maybe<ResolversTypes['Account']>, "accountSellerModified", ParentType, ContextType, RequireFields<SubscriptionAccountSellerModifiedArgs, 'accountId'>>;
  accountUserAdded?: SubscriptionResolver<Maybe<ResolversTypes['User']>, "accountUserAdded", ParentType, ContextType>;
  accountUserRemoved?: SubscriptionResolver<Maybe<ResolversTypes['User']>, "accountUserRemoved", ParentType, ContextType>;
  accountUserUpdated?: SubscriptionResolver<Maybe<ResolversTypes['User']>, "accountUserUpdated", ParentType, ContextType>;
  accountWhileLabelSettingsCreated?: SubscriptionResolver<Maybe<ResolversTypes['AccountSettings']>, "accountWhileLabelSettingsCreated", ParentType, ContextType, RequireFields<SubscriptionAccountWhileLabelSettingsCreatedArgs, 'accountId'>>;
  accountWhileLabelSettingsUpdated?: SubscriptionResolver<Maybe<ResolversTypes['AccountSettings']>, "accountWhileLabelSettingsUpdated", ParentType, ContextType, RequireFields<SubscriptionAccountWhileLabelSettingsUpdatedArgs, 'accountId'>>;
  campaignCreated?: SubscriptionResolver<ResolversTypes['Campaign'], "campaignCreated", ParentType, ContextType>;
  childAccountCreated?: SubscriptionResolver<Maybe<ResolversTypes['Account']>, "childAccountCreated", ParentType, ContextType>;
  externalUserNameUpdated?: SubscriptionResolver<Maybe<ResolversTypes['Account']>, "externalUserNameUpdated", ParentType, ContextType>;
  externameUserNameUpdated?: SubscriptionResolver<Maybe<ResolversTypes['User']>, "externameUserNameUpdated", ParentType, ContextType>;
  lineitemActivated?: SubscriptionResolver<ResolversTypes['Lineitem'], "lineitemActivated", ParentType, ContextType, RequireFields<SubscriptionLineitemActivatedArgs, 'lineitemId'>>;
  lineitemCreated?: SubscriptionResolver<ResolversTypes['Lineitem'], "lineitemCreated", ParentType, ContextType>;
  lineitemPaused?: SubscriptionResolver<ResolversTypes['Lineitem'], "lineitemPaused", ParentType, ContextType, RequireFields<SubscriptionLineitemPausedArgs, 'lineitemId'>>;
  portfolioBrandsModified?: SubscriptionResolver<Maybe<ResolversTypes['Portfolio']>, "portfolioBrandsModified", ParentType, ContextType>;
  portfolioCreated?: SubscriptionResolver<Maybe<ResolversTypes['Portfolio']>, "portfolioCreated", ParentType, ContextType>;
  portfolioMappedToUser?: SubscriptionResolver<Maybe<ResolversTypes['Portfolio']>, "portfolioMappedToUser", ParentType, ContextType>;
  portfolioNameModified?: SubscriptionResolver<Maybe<ResolversTypes['Portfolio']>, "portfolioNameModified", ParentType, ContextType>;
  portfolioUserAdded?: SubscriptionResolver<Maybe<ResolversTypes['User']>, "portfolioUserAdded", ParentType, ContextType>;
  portfolioUserRemovedFrom?: SubscriptionResolver<Maybe<ResolversTypes['User']>, "portfolioUserRemovedFrom", ParentType, ContextType>;
  portfoliosRemoved?: SubscriptionResolver<Maybe<ResolversTypes['Portfolio']>, "portfoliosRemoved", ParentType, ContextType>;
  privateMarketAccountCrated?: SubscriptionResolver<Maybe<ResolversTypes['PrivateMarketAccount']>, "privateMarketAccountCrated", ParentType, ContextType>;
  retailerInitialized?: SubscriptionResolver<Maybe<ResolversTypes['Retailer']>, "retailerInitialized", ParentType, ContextType>;
  retailerUpdated?: SubscriptionResolver<Maybe<ResolversTypes['Retailer']>, "retailerUpdated", ParentType, ContextType>;
  retailerWentLive?: SubscriptionResolver<Maybe<ResolversTypes['Retailer']>, "retailerWentLive", ParentType, ContextType>;
  skuInformationModified?: SubscriptionResolver<Maybe<Array<Maybe<ResolversTypes['SKU']>>>, "skuInformationModified", ParentType, ContextType>;
  taxonomyManuallyAdded?: SubscriptionResolver<Maybe<Array<Maybe<ResolversTypes['Taxonomy']>>>, "taxonomyManuallyAdded", ParentType, ContextType>;
};

export type TaxonomyResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['Taxonomy']> = {
  key?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  skus?: Resolver<Maybe<ResolversTypes['SkuList']>, ParentType, ContextType, RequireFields<TaxonomySkusArgs, 'limit' | 'offset'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface UrlScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['URL'], any> {
  name: 'URL';
}

export type UserResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['User']> = {
  backupCodeEnabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  banned?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  birthday?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  emailAddresses?: Resolver<Maybe<Array<Maybe<ResolversTypes['EmailAddress']>>>, ParentType, ContextType>;
  externalAccounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['ExternalAccount']>>>, ParentType, ContextType>;
  externalId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  firstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  gender?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  hasImage?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  imageUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lastSignInAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  passwordEnabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  phoneNumbers?: Resolver<Maybe<Array<Maybe<ResolversTypes['PhoneNumber']>>>, ParentType, ContextType>;
  primaryEmailAddressId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  primaryPhoneNumberId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  primaryWeb3WalletId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  privateMetadata?: Resolver<Maybe<Array<Maybe<ResolversTypes['Attribute']>>>, ParentType, ContextType>;
  publicMetadata?: Resolver<Maybe<Array<Maybe<ResolversTypes['Attribute']>>>, ParentType, ContextType>;
  totpEnabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  twoFactorEnabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  unsafeMetadata?: Resolver<Maybe<Array<Maybe<ResolversTypes['Attribute']>>>, ParentType, ContextType>;
  updatedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  web3Wallets?: Resolver<Maybe<Array<Maybe<ResolversTypes['Web3Wallet']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VerificationResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['Verification']> = {
  attempts?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  expireAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  externalVerificationRedirectURL?: Resolver<Maybe<ResolversTypes['URL']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  strategy?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Web3WalletResolvers<ContextType = DspContext, ParentType = ResolversParentTypes['Web3Wallet']> = {
  id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  verification?: Resolver<Maybe<ResolversTypes['Verification']>, ParentType, ContextType>;
  web3Wallet?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Resolvers<ContextType = DspContext> = {
  Account?: AccountResolvers<ContextType>;
  AccountFee?: AccountFeeResolvers<ContextType>;
  AccountSettings?: AccountSettingsResolvers<ContextType>;
  AccountWhiteLabelSettings?: AccountWhiteLabelSettingsResolvers<ContextType>;
  Advertiser?: AdvertiserResolvers<ContextType>;
  AdvertiserList?: AdvertiserListResolvers<ContextType>;
  Attribute?: AttributeResolvers<ContextType>;
  Audience?: AudienceResolvers<ContextType>;
  AudienceList?: AudienceListResolvers<ContextType>;
  BooleanAttribute?: BooleanAttributeResolvers<ContextType>;
  Brand?: BrandResolvers<ContextType>;
  BrandList?: BrandListResolvers<ContextType>;
  Campaign?: CampaignResolvers<ContextType>;
  CampaignBudget?: CampaignBudgetResolvers<ContextType>;
  CampaignCapping?: CampaignCappingResolvers<ContextType>;
  CampaignList?: CampaignListResolvers<ContextType>;
  Country?: CountryResolvers<ContextType>;
  CountrySettings?: CountrySettingsResolvers<ContextType>;
  Creative?: CreativeResolvers<ContextType>;
  Currency?: CurrencyResolvers<ContextType>;
  CurrencySettings?: CurrencySettingsResolvers<ContextType>;
  DateTime?: GraphQLScalarType;
  DateTimeAttribute?: DateTimeAttributeResolvers<ContextType>;
  EmailAddress?: EmailAddressResolvers<ContextType>;
  ExternalAccount?: ExternalAccountResolvers<ContextType>;
  IdentificationLink?: IdentificationLinkResolvers<ContextType>;
  Lineitem?: LineitemResolvers<ContextType>;
  LineitemBudget?: LineitemBudgetResolvers<ContextType>;
  LineitemList?: LineitemListResolvers<ContextType>;
  LineitemPage?: LineitemPageResolvers<ContextType>;
  ListCursor?: ListCursorResolvers<ContextType>;
  ListOffsetLimit?: ListOffsetLimitResolvers<ContextType>;
  ListPage?: ListPageResolvers<ContextType>;
  Money?: GraphQLScalarType;
  Mutation?: MutationResolvers<ContextType>;
  NumberAttribute?: NumberAttributeResolvers<ContextType>;
  OffsiteAudience?: OffsiteAudienceResolvers<ContextType>;
  OnsiteAudience?: OnsiteAudienceResolvers<ContextType>;
  PhoneNumber?: PhoneNumberResolvers<ContextType>;
  Portfolio?: PortfolioResolvers<ContextType>;
  PrivateMarketAccount?: PrivateMarketAccountResolvers<ContextType>;
  Query?: QueryResolvers<ContextType>;
  ReportingLabel?: ReportingLabelResolvers<ContextType>;
  Retailer?: RetailerResolvers<ContextType>;
  RetailerExpermentalConfig?: RetailerExpermentalConfigResolvers<ContextType>;
  RetailerList?: RetailerListResolvers<ContextType>;
  RetailerPreferenceDefaultValue?: RetailerPreferenceDefaultValueResolvers<ContextType>;
  RetailerPreferences?: RetailerPreferencesResolvers<ContextType>;
  SKU?: SkuResolvers<ContextType>;
  SalesForceAccount?: SalesForceAccountResolvers<ContextType>;
  Segment?: SegmentResolvers<ContextType>;
  Seller?: SellerResolvers<ContextType>;
  SkuList?: SkuListResolvers<ContextType>;
  StringAttribute?: StringAttributeResolvers<ContextType>;
  Subscription?: SubscriptionResolvers<ContextType>;
  Taxonomy?: TaxonomyResolvers<ContextType>;
  URL?: GraphQLScalarType;
  User?: UserResolvers<ContextType>;
  Verification?: VerificationResolvers<ContextType>;
  Web3Wallet?: Web3WalletResolvers<ContextType>;
};

